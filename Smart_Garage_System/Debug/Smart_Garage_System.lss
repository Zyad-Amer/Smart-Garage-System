
Smart_Garage_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00800060  000037c6  0000385a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800102  00800102  000038fc  2**0
                  ALLOC
  3 .stab         00003144  00000000  00000000  000038fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011c1  00000000  00000000  00006a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a9e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b794  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bb81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c34f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__vector_1>
       8:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e0       	ldi	r26, 0x02	; 2
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 30       	cpi	r26, 0x05	; 5
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c6 05 	call	0xb8c	; 0xb8c <main>
      8a:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 1b 	jmp	0x36ca	; 0x36ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ef       	ldi	r26, 0xFA	; 250
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 1b 	jmp	0x36e2	; 0x36e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 1b 	jmp	0x36e2	; 0x36e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 1b 	jmp	0x36ca	; 0x36ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ef       	ldi	r24, 0xFA	; 250
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 71 1b 	jmp	0x36e2	; 0x36e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 71 1b 	jmp	0x36e2	; 0x36e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 71 1b 	jmp	0x36e2	; 0x36e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <SERVO_MOTOR_vInit>:
 *  Author: Zyad Ayman
 */ 
#include "pwm.h"

void SERVO_MOTOR_vInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//Initializing PWM of Timer1
	PWM_vInit_T1_FastMode();
     b4e:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <PWM_vInit_T1_FastMode>
	//Setting ICR1A as a Compare Value for Servo Motor *it is constant for Servo Motor*
	PWM_vSetValue_ICR1_T1_Manual(2499);
     b52:	83 ec       	ldi	r24, 0xC3	; 195
     b54:	99 e0       	ldi	r25, 0x09	; 9
     b56:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <PWM_vSetValue_ICR1_T1_Manual>
	
}
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	08 95       	ret

00000b60 <SERVO_MOTOR_vRotate_90ClockWise>:
void SERVO_MOTOR_vRotate_90ClockWise()
{
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
	//setting OCR1A Value to get 5% duty Cycle
	PWM_vSetValue_OCR1A_T1_Manual(187);
     b68:	8b eb       	ldi	r24, 0xBB	; 187
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 0b 1b 	call	0x3616	; 0x3616 <PWM_vSetValue_OCR1A_T1_Manual>
	
	
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <SERVO_MOTOR_vRotate_90Anti_ClockWise>:
void SERVO_MOTOR_vRotate_90Anti_ClockWise()
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
		
	//setting OCR1A Value to get 7.5% duty Cycle
	PWM_vSetValue_OCR1A_T1_Manual(125);
     b7e:	8d e7       	ldi	r24, 0x7D	; 125
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 0b 1b 	call	0x3616	; 0x3616 <PWM_vSetValue_OCR1A_T1_Manual>
	
	
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <main>:
 */

#include "Smart_Garage_System.h"

int main()
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	00 d0       	rcall	.+0      	; 0xb92 <main+0x6>
     b92:	00 d0       	rcall	.+0      	; 0xb94 <main+0x8>
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
	uint16 ADC_result=0;
     b98:	1a 82       	std	Y+2, r1	; 0x02
     b9a:	19 82       	std	Y+1, r1	; 0x01

	/* Create configuration structure for ADC driver */
	ADC_ConfigType ADC_Configurations = {AVCC,F_CPU_64};
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	8b 83       	std	Y+3, r24	; 0x03
     ba0:	86 e0       	ldi	r24, 0x06	; 6
     ba2:	8c 83       	std	Y+4, r24	; 0x04

	SREG |=(1<<7);/*enable I-Bit for external interrupt*/
     ba4:	af e5       	ldi	r26, 0x5F	; 95
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ef e5       	ldi	r30, 0x5F	; 95
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	80 68       	ori	r24, 0x80	; 128
     bb0:	8c 93       	st	X, r24

	/*set the direction of led pin PD0 as output*/
	GPIO_setupPinDirection(PORTD_ID,PIN0_ID,PIN_OUTPUT);
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	41 e0       	ldi	r20, 0x01	; 1
     bb8:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>

	/*set the direction of the switches pins PD2 & PD3 as input (IR simulators)*/
	GPIO_setupPinDirection(PORTD_ID,PIN2_ID,PIN_INPUT);
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	62 e0       	ldi	r22, 0x02	; 2
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID,PIN3_ID,PIN_INPUT);
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	63 e0       	ldi	r22, 0x03	; 3
     bca:	40 e0       	ldi	r20, 0x00	; 0
     bcc:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>

	/*Activating the internal pullup for pins PD2 & PD3*/
	GPIO_writePin(PORTD_ID,PIN2_ID,1);
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	62 e0       	ldi	r22, 0x02	; 2
     bd4:	41 e0       	ldi	r20, 0x01	; 1
     bd6:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
	GPIO_writePin(PORTD_ID,PIN3_ID,1);
     bda:	83 e0       	ldi	r24, 0x03	; 3
     bdc:	63 e0       	ldi	r22, 0x03	; 3
     bde:	41 e0       	ldi	r20, 0x01	; 1
     be0:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>

	/* initialize the led to be turned off*/
	GPIO_writePin(PORTD_ID,PIN0_ID,LOGIC_LOW);
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>

	/*passing the configuration structure to the function by address*/
	ADC_init(&ADC_Configurations);
     bee:	ce 01       	movw	r24, r28
     bf0:	03 96       	adiw	r24, 0x03	; 3
     bf2:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <ADC_init>

	LCD_init();/*initialize the LCD */
     bf6:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_init>

	SERVO_MOTOR_vInit(); /*initialize the LCD */
     bfa:	0e 94 a3 05 	call	0xb46	; 0xb46 <SERVO_MOTOR_vInit>

	CreatePassword();
     bfe:	0e 94 69 08 	call	0x10d2	; 0x10d2 <CreatePassword>

	/*Display number of cars inside the garage on LCD*/
	LCD_clearScreen();
     c02:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clearScreen>
	LCD_displayString("Cars Number =0");
     c06:	80 e6       	ldi	r24, 0x60	; 96
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 c2 19 	call	0x3384	; 0x3384 <LCD_displayString>

	/*Display the garage state on LCD*/
	LCD_moveCursor(1,0);
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <LCD_moveCursor>
	LCD_displayString("State: Available");
     c16:	8f e6       	ldi	r24, 0x6F	; 111
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 c2 19 	call	0x3384	; 0x3384 <LCD_displayString>

	/*INTIALIZING INT0 and INT0*/
	EXTI_vConfig_( INT_0 , INPUT , FALLING_EDGE);
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	42 e0       	ldi	r20, 0x02	; 2
     c24:	0e 94 c6 09 	call	0x138c	; 0x138c <EXTI_vConfig_>
	EXTI_vConfig_(INT_1 , INPUT , FALLING_EDGE);
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	42 e0       	ldi	r20, 0x02	; 2
     c2e:	0e 94 c6 09 	call	0x138c	; 0x138c <EXTI_vConfig_>

	while(1)
	{
		ADC_result=ADC_readChannel(ADC_CHANNEL);
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	0e 94 21 0b 	call	0x1642	; 0x1642 <ADC_readChannel>
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01

		/* at the night*/
		if(ADC_result >= ADC_THRESHOLD)
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	21 e0       	ldi	r18, 0x01	; 1
     c42:	8f 3f       	cpi	r24, 0xFF	; 255
     c44:	92 07       	cpc	r25, r18
     c46:	30 f0       	brcs	.+12     	; 0xc54 <main+0xc8>
		{
			GPIO_writePin(PORTD_ID,PIN0_ID,LOGIC_HIGH);/*turn on the led*/
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	41 e0       	ldi	r20, 0x01	; 1
     c4e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
     c52:	0b c0       	rjmp	.+22     	; 0xc6a <main+0xde>
		}

		/* at the Day light*/
		else if(ADC_result < ADC_THRESHOLD)
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	9a 81       	ldd	r25, Y+2	; 0x02
     c58:	21 e0       	ldi	r18, 0x01	; 1
     c5a:	8f 3f       	cpi	r24, 0xFF	; 255
     c5c:	92 07       	cpc	r25, r18
     c5e:	28 f4       	brcc	.+10     	; 0xc6a <main+0xde>
		{
			GPIO_writePin(PORTD_ID,PIN0_ID,LOGIC_LOW);/*turn off the led*/
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
		}


		/*check if the IR sensor 1 detect a car(if external interrupt 0 triggered)*/
		if(INT0_IR1_FLAG==triggered)
     c6a:	80 91 03 01 	lds	r24, 0x0103
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	c1 f4       	brne	.+48     	; 0xca2 <main+0x116>
		{
			if(Cars_Number == Max_CARS_NUMBER)
     c72:	80 91 02 01 	lds	r24, 0x0102
     c76:	83 30       	cpi	r24, 0x03	; 3
     c78:	19 f4       	brne	.+6      	; 0xc80 <main+0xf4>
			{
				changeToBusyOnLCD(); /*change the garage state to busy on lcd*/
     c7a:	0e 94 b9 06 	call	0xd72	; 0xd72 <changeToBusyOnLCD>
     c7e:	0f c0       	rjmp	.+30     	; 0xc9e <main+0x112>
			}
			else
			{
				/*open the arm gate then wait the car to pass then close it again*/
				enterTheCar();
     c80:	0e 94 dd 06 	call	0xdba	; 0xdba <enterTheCar>

				if (Cars_Number == (Max_CARS_NUMBER - 1))
     c84:	80 91 02 01 	lds	r24, 0x0102
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	11 f4       	brne	.+4      	; 0xc90 <main+0x104>
				{
					changeToBusyOnLCD();/*change the garage state to busy on lcd*/
     c8c:	0e 94 b9 06 	call	0xd72	; 0xd72 <changeToBusyOnLCD>
				}

				Cars_Number++; /*add the entered car to the counter*/
     c90:	80 91 02 01 	lds	r24, 0x0102
     c94:	8f 5f       	subi	r24, 0xFF	; 255
     c96:	80 93 02 01 	sts	0x0102, r24
				changeCarsNumberOnLCD();/*change the number of cars on the LCD*/
     c9a:	0e 94 c8 06 	call	0xd90	; 0xd90 <changeCarsNumberOnLCD>
			}
			INT0_IR1_FLAG=0; /*clear the interrupt flag for the next time*/
     c9e:	10 92 03 01 	sts	0x0103, r1
		}

		//check if the IR sensor 2 detect a car(if external interrupt 1 triggered)/
		if(INT1_IR2_FLAG==triggered)
     ca2:	80 91 04 01 	lds	r24, 0x0104
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	21 f6       	brne	.-120    	; 0xc32 <main+0xa6>
		{
			if(Cars_Number == Max_CARS_NUMBER)
     caa:	80 91 02 01 	lds	r24, 0x0102
     cae:	83 30       	cpi	r24, 0x03	; 3
     cb0:	61 f4       	brne	.+24     	; 0xcca <main+0x13e>
			{
				//Opening the gate for car to pass and waiting till pass and closing the gate again
				Exit_TheCar();
     cb2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Exit_TheCar>

				//Displaying Available Word on lcd
				changeToAvailableOnLCD();
     cb6:	0e 94 cb 0a 	call	0x1596	; 0x1596 <changeToAvailableOnLCD>

				//decrement the cars number by one
				Cars_Number-- ;
     cba:	80 91 02 01 	lds	r24, 0x0102
     cbe:	81 50       	subi	r24, 0x01	; 1
     cc0:	80 93 02 01 	sts	0x0102, r24

				changeCarsNumberOnLCD();/*change the number of cars on the LCD*/
     cc4:	0e 94 c8 06 	call	0xd90	; 0xd90 <changeCarsNumberOnLCD>
     cc8:	09 c0       	rjmp	.+18     	; 0xcdc <main+0x150>
			}
			else
			{
				//Opening the gate for car to pass and waiting till pass and closing the gate again
				Exit_TheCar();
     cca:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Exit_TheCar>

				//decrement the cars number by one
				Cars_Number-- ;
     cce:	80 91 02 01 	lds	r24, 0x0102
     cd2:	81 50       	subi	r24, 0x01	; 1
     cd4:	80 93 02 01 	sts	0x0102, r24

				changeCarsNumberOnLCD();/*change the number of cars on the LCD*/
     cd8:	0e 94 c8 06 	call	0xd90	; 0xd90 <changeCarsNumberOnLCD>
			}
		  	INT1_IR2_FLAG=0; /*clear the interrupt flag for the next time*/
     cdc:	10 92 04 01 	sts	0x0104, r1
     ce0:	a8 cf       	rjmp	.-176    	; 0xc32 <main+0xa6>

00000ce2 <__vector_1>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

ISR(INT0_vect)
{
     ce2:	1f 92       	push	r1
     ce4:	0f 92       	push	r0
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	0f 92       	push	r0
     cea:	11 24       	eor	r1, r1
     cec:	8f 93       	push	r24
     cee:	af 93       	push	r26
     cf0:	bf 93       	push	r27
     cf2:	ef 93       	push	r30
     cf4:	ff 93       	push	r31
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
	INT0_IR1_FLAG=1; /*trigger the int0 flag to indicate that the interrupt ocuur*/
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	80 93 03 01 	sts	0x0103, r24
	SET_BIT(GIFR,6); /*clear the interrupt flag for the next time*/
     d04:	aa e5       	ldi	r26, 0x5A	; 90
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	ea e5       	ldi	r30, 0x5A	; 90
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	80 64       	ori	r24, 0x40	; 64
     d10:	8c 93       	st	X, r24
}
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	ff 91       	pop	r31
     d18:	ef 91       	pop	r30
     d1a:	bf 91       	pop	r27
     d1c:	af 91       	pop	r26
     d1e:	8f 91       	pop	r24
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	0f 90       	pop	r0
     d26:	1f 90       	pop	r1
     d28:	18 95       	reti

00000d2a <__vector_2>:

ISR(INT1_vect)
{
     d2a:	1f 92       	push	r1
     d2c:	0f 92       	push	r0
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	0f 92       	push	r0
     d32:	11 24       	eor	r1, r1
     d34:	8f 93       	push	r24
     d36:	af 93       	push	r26
     d38:	bf 93       	push	r27
     d3a:	ef 93       	push	r30
     d3c:	ff 93       	push	r31
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
	INT1_IR2_FLAG=1;/*trigger the int1 flag to indicate that the interrupt ocuur*/
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	80 93 04 01 	sts	0x0104, r24
	SET_BIT(GIFR,7); /*clear the interrupt flag for the next time*/
     d4c:	aa e5       	ldi	r26, 0x5A	; 90
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	ea e5       	ldi	r30, 0x5A	; 90
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	80 68       	ori	r24, 0x80	; 128
     d58:	8c 93       	st	X, r24
}
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	ff 91       	pop	r31
     d60:	ef 91       	pop	r30
     d62:	bf 91       	pop	r27
     d64:	af 91       	pop	r26
     d66:	8f 91       	pop	r24
     d68:	0f 90       	pop	r0
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	0f 90       	pop	r0
     d6e:	1f 90       	pop	r1
     d70:	18 95       	reti

00000d72 <changeToBusyOnLCD>:


void changeToBusyOnLCD(void)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
	/*change the garage state to busy*/
	LCD_moveCursor(1,7);
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	67 e0       	ldi	r22, 0x07	; 7
     d7e:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <LCD_moveCursor>
	LCD_displayString("Busy     ");/*display 5 spaces to avoid overwrite of "Available"word*/
     d82:	80 e8       	ldi	r24, 0x80	; 128
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 c2 19 	call	0x3384	; 0x3384 <LCD_displayString>
}
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <changeCarsNumberOnLCD>:

void changeCarsNumberOnLCD(void)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	LCD_moveCursor(0,13);
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	6d e0       	ldi	r22, 0x0D	; 13
     d9c:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <LCD_moveCursor>
	LCD_intgerToString(Cars_Number); /*change number of cars on LCD*/
     da0:	80 91 02 01 	lds	r24, 0x0102
     da4:	88 2f       	mov	r24, r24
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 46 1a 	call	0x348c	; 0x348c <LCD_intgerToString>
	LCD_displayString("  ");
     dac:	8a e8       	ldi	r24, 0x8A	; 138
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 c2 19 	call	0x3384	; 0x3384 <LCD_displayString>
}
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <enterTheCar>:

void enterTheCar(void)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
	/*Rotating the servo motor to open the arm gate*/
	SERVO_MOTOR_vRotate_90ClockWise();
     dc2:	0e 94 b0 05 	call	0xb60	; 0xb60 <SERVO_MOTOR_vRotate_90ClockWise>

	/*wait the car to pass the arm */
	while (!GPIO_readPin(PORTD_ID,PIN2));
     dc6:	83 e0       	ldi	r24, 0x03	; 3
     dc8:	62 e0       	ldi	r22, 0x02	; 2
     dca:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <GPIO_readPin>
     dce:	88 23       	and	r24, r24
     dd0:	d1 f3       	breq	.-12     	; 0xdc6 <enterTheCar+0xc>

	/*Rotating the servo motor to close the arm gate*/
	SERVO_MOTOR_vRotate_90Anti_ClockWise();
     dd2:	0e 94 bb 05 	call	0xb76	; 0xb76 <SERVO_MOTOR_vRotate_90Anti_ClockWise>
}
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <compareArrays>:

uint8 compareArrays(uint8 *arr1,uint8 *arr2,uint8 size)
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	27 97       	sbiw	r28, 0x07	; 7
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	9b 83       	std	Y+3, r25	; 0x03
     df2:	8a 83       	std	Y+2, r24	; 0x02
     df4:	7d 83       	std	Y+5, r23	; 0x05
     df6:	6c 83       	std	Y+4, r22	; 0x04
     df8:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	for(i=0;i<size;i++)
     dfa:	19 82       	std	Y+1, r1	; 0x01
     dfc:	1a c0       	rjmp	.+52     	; 0xe32 <compareArrays+0x56>
	{
		if(arr1[i]!=arr2[i])
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	9b 81       	ldd	r25, Y+3	; 0x03
     e08:	fc 01       	movw	r30, r24
     e0a:	e2 0f       	add	r30, r18
     e0c:	f3 1f       	adc	r31, r19
     e0e:	40 81       	ld	r20, Z
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	8c 81       	ldd	r24, Y+4	; 0x04
     e18:	9d 81       	ldd	r25, Y+5	; 0x05
     e1a:	fc 01       	movw	r30, r24
     e1c:	e2 0f       	add	r30, r18
     e1e:	f3 1f       	adc	r31, r19
     e20:	80 81       	ld	r24, Z
     e22:	48 17       	cp	r20, r24
     e24:	19 f0       	breq	.+6      	; 0xe2c <compareArrays+0x50>
		{
			return UNMATCHED_PASSWORDS;
     e26:	8a e0       	ldi	r24, 0x0A	; 10
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	09 c0       	rjmp	.+18     	; 0xe3e <compareArrays+0x62>
}

uint8 compareArrays(uint8 *arr1,uint8 *arr2,uint8 size)
{
	uint8 i;
	for(i=0;i<size;i++)
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	99 81       	ldd	r25, Y+1	; 0x01
     e34:	8e 81       	ldd	r24, Y+6	; 0x06
     e36:	98 17       	cp	r25, r24
     e38:	10 f3       	brcs	.-60     	; 0xdfe <compareArrays+0x22>
		if(arr1[i]!=arr2[i])
		{
			return UNMATCHED_PASSWORDS;
		}
	}
	return MATCHED_PASSWORDS;
     e3a:	84 e1       	ldi	r24, 0x14	; 20
     e3c:	8f 83       	std	Y+7, r24	; 0x07
     e3e:	8f 81       	ldd	r24, Y+7	; 0x07
}
     e40:	27 96       	adiw	r28, 0x07	; 7
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <getPassword>:

/*function to get the password from the user then store it in an array
 * and display * for each number then go to infinite loop until press = */
void getPassword(uint8 *pass,uint8 size,uint8 firstPlace)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	a2 97       	sbiw	r28, 0x22	; 34
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	98 a3       	std	Y+32, r25	; 0x20
     e68:	8f 8f       	std	Y+31, r24	; 0x1f
     e6a:	69 a3       	std	Y+33, r22	; 0x21
     e6c:	4a a3       	std	Y+34, r20	; 0x22
	uint8 i,key;
	for(i=0;i<size;i++)
     e6e:	1e 8e       	std	Y+30, r1	; 0x1e
     e70:	1e c1       	rjmp	.+572    	; 0x10ae <getPassword+0x25c>
	{
		key=KEYPAD_getPressedKey();
     e72:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <KEYPAD_getPressedKey>
     e76:	8d 8f       	std	Y+29, r24	; 0x1d
		if(key <10 )/*if the user enters any number from 0 to 9 store it in pass array*/
     e78:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e7a:	8a 30       	cpi	r24, 0x0A	; 10
     e7c:	08 f0       	brcs	.+2      	; 0xe80 <getPassword+0x2e>
     e7e:	87 c0       	rjmp	.+270    	; 0xf8e <getPassword+0x13c>
		{
			pass[i]=key;
     e80:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e88:	98 a1       	ldd	r25, Y+32	; 0x20
     e8a:	fc 01       	movw	r30, r24
     e8c:	e2 0f       	add	r30, r18
     e8e:	f3 1f       	adc	r31, r19
     e90:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e92:	80 83       	st	Z, r24
			LCD_moveCursor(1,firstPlace+i);
     e94:	9a a1       	ldd	r25, Y+34	; 0x22
     e96:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e98:	98 0f       	add	r25, r24
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	69 2f       	mov	r22, r25
     e9e:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <LCD_moveCursor>
			LCD_displayCharacter('*');
     ea2:	8a e2       	ldi	r24, 0x2A	; 42
     ea4:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_displayCharacter>
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	ae e3       	ldi	r26, 0x3E	; 62
     eae:	b3 e4       	ldi	r27, 0x43	; 67
     eb0:	89 8f       	std	Y+25, r24	; 0x19
     eb2:	9a 8f       	std	Y+26, r25	; 0x1a
     eb4:	ab 8f       	std	Y+27, r26	; 0x1b
     eb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb8:	69 8d       	ldd	r22, Y+25	; 0x19
     eba:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ebc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ebe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	4a ef       	ldi	r20, 0xFA	; 250
     ec6:	54 e4       	ldi	r21, 0x44	; 68
     ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	8d 8b       	std	Y+21, r24	; 0x15
     ed2:	9e 8b       	std	Y+22, r25	; 0x16
     ed4:	af 8b       	std	Y+23, r26	; 0x17
     ed6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ed8:	6d 89       	ldd	r22, Y+21	; 0x15
     eda:	7e 89       	ldd	r23, Y+22	; 0x16
     edc:	8f 89       	ldd	r24, Y+23	; 0x17
     ede:	98 8d       	ldd	r25, Y+24	; 0x18
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e8       	ldi	r20, 0x80	; 128
     ee6:	5f e3       	ldi	r21, 0x3F	; 63
     ee8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eec:	88 23       	and	r24, r24
     eee:	2c f4       	brge	.+10     	; 0xefa <getPassword+0xa8>
		__ticks = 1;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9c 8b       	std	Y+20, r25	; 0x14
     ef6:	8b 8b       	std	Y+19, r24	; 0x13
     ef8:	3f c0       	rjmp	.+126    	; 0xf78 <getPassword+0x126>
	else if (__tmp > 65535)
     efa:	6d 89       	ldd	r22, Y+21	; 0x15
     efc:	7e 89       	ldd	r23, Y+22	; 0x16
     efe:	8f 89       	ldd	r24, Y+23	; 0x17
     f00:	98 8d       	ldd	r25, Y+24	; 0x18
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	3f ef       	ldi	r19, 0xFF	; 255
     f06:	4f e7       	ldi	r20, 0x7F	; 127
     f08:	57 e4       	ldi	r21, 0x47	; 71
     f0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f0e:	18 16       	cp	r1, r24
     f10:	4c f5       	brge	.+82     	; 0xf64 <getPassword+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f12:	69 8d       	ldd	r22, Y+25	; 0x19
     f14:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f16:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f18:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e2       	ldi	r20, 0x20	; 32
     f20:	51 e4       	ldi	r21, 0x41	; 65
     f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	bc 01       	movw	r22, r24
     f2c:	cd 01       	movw	r24, r26
     f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9c 8b       	std	Y+20, r25	; 0x14
     f38:	8b 8b       	std	Y+19, r24	; 0x13
     f3a:	0f c0       	rjmp	.+30     	; 0xf5a <getPassword+0x108>
     f3c:	88 ec       	ldi	r24, 0xC8	; 200
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9a 8b       	std	Y+18, r25	; 0x12
     f42:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f44:	89 89       	ldd	r24, Y+17	; 0x11
     f46:	9a 89       	ldd	r25, Y+18	; 0x12
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <getPassword+0xf6>
     f4c:	9a 8b       	std	Y+18, r25	; 0x12
     f4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f50:	8b 89       	ldd	r24, Y+19	; 0x13
     f52:	9c 89       	ldd	r25, Y+20	; 0x14
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	9c 8b       	std	Y+20, r25	; 0x14
     f58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5a:	8b 89       	ldd	r24, Y+19	; 0x13
     f5c:	9c 89       	ldd	r25, Y+20	; 0x14
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	69 f7       	brne	.-38     	; 0xf3c <getPassword+0xea>
     f62:	a2 c0       	rjmp	.+324    	; 0x10a8 <getPassword+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f64:	6d 89       	ldd	r22, Y+21	; 0x15
     f66:	7e 89       	ldd	r23, Y+22	; 0x16
     f68:	8f 89       	ldd	r24, Y+23	; 0x17
     f6a:	98 8d       	ldd	r25, Y+24	; 0x18
     f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	9c 8b       	std	Y+20, r25	; 0x14
     f76:	8b 8b       	std	Y+19, r24	; 0x13
     f78:	8b 89       	ldd	r24, Y+19	; 0x13
     f7a:	9c 89       	ldd	r25, Y+20	; 0x14
     f7c:	98 8b       	std	Y+16, r25	; 0x10
     f7e:	8f 87       	std	Y+15, r24	; 0x0f
     f80:	8f 85       	ldd	r24, Y+15	; 0x0f
     f82:	98 89       	ldd	r25, Y+16	; 0x10
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <getPassword+0x132>
     f88:	98 8b       	std	Y+16, r25	; 0x10
     f8a:	8f 87       	std	Y+15, r24	; 0x0f
     f8c:	8d c0       	rjmp	.+282    	; 0x10a8 <getPassword+0x256>
			_delay_ms(190);
		}
		else if(key ==13)/*handling the delete button */
     f8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f90:	8d 30       	cpi	r24, 0x0D	; 13
     f92:	09 f0       	breq	.+2      	; 0xf96 <getPassword+0x144>
     f94:	86 c0       	rjmp	.+268    	; 0x10a2 <getPassword+0x250>
		{
			i--;
     f96:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f98:	81 50       	subi	r24, 0x01	; 1
     f9a:	8e 8f       	std	Y+30, r24	; 0x1e
			LCD_moveCursor(1,firstPlace+i);
     f9c:	9a a1       	ldd	r25, Y+34	; 0x22
     f9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fa0:	98 0f       	add	r25, r24
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	69 2f       	mov	r22, r25
     fa6:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <LCD_moveCursor>
			LCD_displayCharacter(' ');
     faa:	80 e2       	ldi	r24, 0x20	; 32
     fac:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_displayCharacter>
			i--;
     fb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fb2:	81 50       	subi	r24, 0x01	; 1
     fb4:	8e 8f       	std	Y+30, r24	; 0x1e
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	ae e3       	ldi	r26, 0x3E	; 62
     fbc:	b3 e4       	ldi	r27, 0x43	; 67
     fbe:	8b 87       	std	Y+11, r24	; 0x0b
     fc0:	9c 87       	std	Y+12, r25	; 0x0c
     fc2:	ad 87       	std	Y+13, r26	; 0x0d
     fc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fca:	8d 85       	ldd	r24, Y+13	; 0x0d
     fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	4a ef       	ldi	r20, 0xFA	; 250
     fd4:	54 e4       	ldi	r21, 0x44	; 68
     fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	8f 83       	std	Y+7, r24	; 0x07
     fe0:	98 87       	std	Y+8, r25	; 0x08
     fe2:	a9 87       	std	Y+9, r26	; 0x09
     fe4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fe6:	6f 81       	ldd	r22, Y+7	; 0x07
     fe8:	78 85       	ldd	r23, Y+8	; 0x08
     fea:	89 85       	ldd	r24, Y+9	; 0x09
     fec:	9a 85       	ldd	r25, Y+10	; 0x0a
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e8       	ldi	r20, 0x80	; 128
     ff4:	5f e3       	ldi	r21, 0x3F	; 63
     ff6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ffa:	88 23       	and	r24, r24
     ffc:	2c f4       	brge	.+10     	; 0x1008 <getPassword+0x1b6>
		__ticks = 1;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	9e 83       	std	Y+6, r25	; 0x06
    1004:	8d 83       	std	Y+5, r24	; 0x05
    1006:	3f c0       	rjmp	.+126    	; 0x1086 <getPassword+0x234>
	else if (__tmp > 65535)
    1008:	6f 81       	ldd	r22, Y+7	; 0x07
    100a:	78 85       	ldd	r23, Y+8	; 0x08
    100c:	89 85       	ldd	r24, Y+9	; 0x09
    100e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	3f ef       	ldi	r19, 0xFF	; 255
    1014:	4f e7       	ldi	r20, 0x7F	; 127
    1016:	57 e4       	ldi	r21, 0x47	; 71
    1018:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101c:	18 16       	cp	r1, r24
    101e:	4c f5       	brge	.+82     	; 0x1072 <getPassword+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1020:	6b 85       	ldd	r22, Y+11	; 0x0b
    1022:	7c 85       	ldd	r23, Y+12	; 0x0c
    1024:	8d 85       	ldd	r24, Y+13	; 0x0d
    1026:	9e 85       	ldd	r25, Y+14	; 0x0e
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e2       	ldi	r20, 0x20	; 32
    102e:	51 e4       	ldi	r21, 0x41	; 65
    1030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	9e 83       	std	Y+6, r25	; 0x06
    1046:	8d 83       	std	Y+5, r24	; 0x05
    1048:	0f c0       	rjmp	.+30     	; 0x1068 <getPassword+0x216>
    104a:	88 ec       	ldi	r24, 0xC8	; 200
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	9c 83       	std	Y+4, r25	; 0x04
    1050:	8b 83       	std	Y+3, r24	; 0x03
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <getPassword+0x204>
    105a:	9c 83       	std	Y+4, r25	; 0x04
    105c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	9e 83       	std	Y+6, r25	; 0x06
    1066:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	69 f7       	brne	.-38     	; 0x104a <getPassword+0x1f8>
    1070:	1b c0       	rjmp	.+54     	; 0x10a8 <getPassword+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1072:	6f 81       	ldd	r22, Y+7	; 0x07
    1074:	78 85       	ldd	r23, Y+8	; 0x08
    1076:	89 85       	ldd	r24, Y+9	; 0x09
    1078:	9a 85       	ldd	r25, Y+10	; 0x0a
    107a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	9e 83       	std	Y+6, r25	; 0x06
    1084:	8d 83       	std	Y+5, r24	; 0x05
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	9e 81       	ldd	r25, Y+6	; 0x06
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <getPassword+0x240>
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	06 c0       	rjmp	.+12     	; 0x10a8 <getPassword+0x256>
			_delay_ms(190);
		}
		else/*if the user enters any other button do nothing and wait a valid number*/
		{
			while(key >10){key=KEYPAD_getPressedKey();}
    109c:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <KEYPAD_getPressedKey>
    10a0:	8d 8f       	std	Y+29, r24	; 0x1d
    10a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10a4:	8b 30       	cpi	r24, 0x0B	; 11
    10a6:	d0 f7       	brcc	.-12     	; 0x109c <getPassword+0x24a>
/*function to get the password from the user then store it in an array
 * and display * for each number then go to infinite loop until press = */
void getPassword(uint8 *pass,uint8 size,uint8 firstPlace)
{
	uint8 i,key;
	for(i=0;i<size;i++)
    10a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10aa:	8f 5f       	subi	r24, 0xFF	; 255
    10ac:	8e 8f       	std	Y+30, r24	; 0x1e
    10ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10b0:	89 a1       	ldd	r24, Y+33	; 0x21
    10b2:	98 17       	cp	r25, r24
    10b4:	08 f4       	brcc	.+2      	; 0x10b8 <getPassword+0x266>
    10b6:	dd ce       	rjmp	.-582    	; 0xe72 <getPassword+0x20>
		{
			while(key >10){key=KEYPAD_getPressedKey();}
		}
	}
	/*wait for pressing =(enter) */
	while(KEYPAD_getPressedKey() !=EQUALBUTTON){}
    10b8:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <KEYPAD_getPressedKey>
    10bc:	8d 33       	cpi	r24, 0x3D	; 61
    10be:	e1 f7       	brne	.-8      	; 0x10b8 <getPassword+0x266>
}
    10c0:	a2 96       	adiw	r28, 0x22	; 34
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <CreatePassword>:

void CreatePassword(void)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	a7 97       	sbiw	r28, 0x27	; 39
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
	uint8 pass1[PASSWORD_SIZE]={0},pass2[PASSWORD_SIZE]={0},CheckPass;
    10e6:	85 e0       	ldi	r24, 0x05	; 5
    10e8:	fe 01       	movw	r30, r28
    10ea:	7e 96       	adiw	r30, 0x1e	; 30
    10ec:	df 01       	movw	r26, r30
    10ee:	98 2f       	mov	r25, r24
    10f0:	1d 92       	st	X+, r1
    10f2:	9a 95       	dec	r25
    10f4:	e9 f7       	brne	.-6      	; 0x10f0 <CreatePassword+0x1e>
    10f6:	85 e0       	ldi	r24, 0x05	; 5
    10f8:	fe 01       	movw	r30, r28
    10fa:	b3 96       	adiw	r30, 0x23	; 35
    10fc:	df 01       	movw	r26, r30
    10fe:	98 2f       	mov	r25, r24
    1100:	1d 92       	st	X+, r1
    1102:	9a 95       	dec	r25
    1104:	e9 f7       	brne	.-6      	; 0x1100 <CreatePassword+0x2e>

	LCD_clearScreen();
    1106:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clearScreen>
	LCD_displayString("Enter pass ");
    110a:	8d e8       	ldi	r24, 0x8D	; 141
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 c2 19 	call	0x3384	; 0x3384 <LCD_displayString>
	LCD_intgerToString(PASSWORD_SIZE);
    1112:	85 e0       	ldi	r24, 0x05	; 5
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 46 1a 	call	0x348c	; 0x348c <LCD_intgerToString>
	LCD_displayString(" Num");
    111a:	89 e9       	ldi	r24, 0x99	; 153
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 c2 19 	call	0x3384	; 0x3384 <LCD_displayString>

	/*Get the 1st password from the user then store it in pass1 array
	 * and display '*' for each number entered then wait for pressing =(enter)*/
	getPassword(pass1,PASSWORD_SIZE,0);
    1122:	ce 01       	movw	r24, r28
    1124:	4e 96       	adiw	r24, 0x1e	; 30
    1126:	65 e0       	ldi	r22, 0x05	; 5
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	0e 94 29 07 	call	0xe52	; 0xe52 <getPassword>

	/*clear screen and display the new string*/
	LCD_clearScreen();
    112e:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clearScreen>
	LCD_displayString("plz re-enter the");
    1132:	8e e9       	ldi	r24, 0x9E	; 158
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 c2 19 	call	0x3384	; 0x3384 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"same pass: ");
    113a:	2f ea       	ldi	r18, 0xAF	; 175
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	a9 01       	movw	r20, r18
    1144:	0e 94 2d 1a 	call	0x345a	; 0x345a <LCD_displayStringRowColumn>

	/*Get the 2nd password from the user and store it in pass2 array
	 * and display '*' for each number entered and wait for pressing =(enter)*/
	getPassword(pass2,PASSWORD_SIZE,11);
    1148:	ce 01       	movw	r24, r28
    114a:	83 96       	adiw	r24, 0x23	; 35
    114c:	65 e0       	ldi	r22, 0x05	; 5
    114e:	4b e0       	ldi	r20, 0x0B	; 11
    1150:	0e 94 29 07 	call	0xe52	; 0xe52 <getPassword>

	CheckPass=compareArrays(pass1,pass2,PASSWORD_SIZE);
    1154:	ce 01       	movw	r24, r28
    1156:	4e 96       	adiw	r24, 0x1e	; 30
    1158:	9e 01       	movw	r18, r28
    115a:	2d 5d       	subi	r18, 0xDD	; 221
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	b9 01       	movw	r22, r18
    1160:	45 e0       	ldi	r20, 0x05	; 5
    1162:	0e 94 ee 06 	call	0xddc	; 0xddc <compareArrays>
    1166:	8d 8f       	std	Y+29, r24	; 0x1d

	/*if 2 different passwords are entered */
	if(CheckPass== UNMATCHED_PASSWORDS)
    1168:	8d 8d       	ldd	r24, Y+29	; 0x1d
    116a:	8a 30       	cpi	r24, 0x0A	; 10
    116c:	09 f0       	breq	.+2      	; 0x1170 <CreatePassword+0x9e>
    116e:	82 c0       	rjmp	.+260    	; 0x1274 <CreatePassword+0x1a2>
	{
		LCD_clearScreen();
    1170:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clearScreen>
		LCD_displayString("Passwords differ");
    1174:	8b eb       	ldi	r24, 0xBB	; 187
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 c2 19 	call	0x3384	; 0x3384 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"Retry");
    117c:	2c ec       	ldi	r18, 0xCC	; 204
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	a9 01       	movw	r20, r18
    1186:	0e 94 2d 1a 	call	0x345a	; 0x345a <LCD_displayStringRowColumn>
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e8       	ldi	r25, 0x80	; 128
    118e:	ab e3       	ldi	r26, 0x3B	; 59
    1190:	b5 e4       	ldi	r27, 0x45	; 69
    1192:	89 8f       	std	Y+25, r24	; 0x19
    1194:	9a 8f       	std	Y+26, r25	; 0x1a
    1196:	ab 8f       	std	Y+27, r26	; 0x1b
    1198:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    119a:	69 8d       	ldd	r22, Y+25	; 0x19
    119c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    119e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	4a ef       	ldi	r20, 0xFA	; 250
    11a8:	54 e4       	ldi	r21, 0x44	; 68
    11aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	8d 8b       	std	Y+21, r24	; 0x15
    11b4:	9e 8b       	std	Y+22, r25	; 0x16
    11b6:	af 8b       	std	Y+23, r26	; 0x17
    11b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11ba:	6d 89       	ldd	r22, Y+21	; 0x15
    11bc:	7e 89       	ldd	r23, Y+22	; 0x16
    11be:	8f 89       	ldd	r24, Y+23	; 0x17
    11c0:	98 8d       	ldd	r25, Y+24	; 0x18
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e8       	ldi	r20, 0x80	; 128
    11c8:	5f e3       	ldi	r21, 0x3F	; 63
    11ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ce:	88 23       	and	r24, r24
    11d0:	2c f4       	brge	.+10     	; 0x11dc <CreatePassword+0x10a>
		__ticks = 1;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	9c 8b       	std	Y+20, r25	; 0x14
    11d8:	8b 8b       	std	Y+19, r24	; 0x13
    11da:	3f c0       	rjmp	.+126    	; 0x125a <CreatePassword+0x188>
	else if (__tmp > 65535)
    11dc:	6d 89       	ldd	r22, Y+21	; 0x15
    11de:	7e 89       	ldd	r23, Y+22	; 0x16
    11e0:	8f 89       	ldd	r24, Y+23	; 0x17
    11e2:	98 8d       	ldd	r25, Y+24	; 0x18
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	3f ef       	ldi	r19, 0xFF	; 255
    11e8:	4f e7       	ldi	r20, 0x7F	; 127
    11ea:	57 e4       	ldi	r21, 0x47	; 71
    11ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f0:	18 16       	cp	r1, r24
    11f2:	4c f5       	brge	.+82     	; 0x1246 <CreatePassword+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f4:	69 8d       	ldd	r22, Y+25	; 0x19
    11f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e2       	ldi	r20, 0x20	; 32
    1202:	51 e4       	ldi	r21, 0x41	; 65
    1204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	bc 01       	movw	r22, r24
    120e:	cd 01       	movw	r24, r26
    1210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	9c 8b       	std	Y+20, r25	; 0x14
    121a:	8b 8b       	std	Y+19, r24	; 0x13
    121c:	0f c0       	rjmp	.+30     	; 0x123c <CreatePassword+0x16a>
    121e:	88 ec       	ldi	r24, 0xC8	; 200
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	9a 8b       	std	Y+18, r25	; 0x12
    1224:	89 8b       	std	Y+17, r24	; 0x11
    1226:	89 89       	ldd	r24, Y+17	; 0x11
    1228:	9a 89       	ldd	r25, Y+18	; 0x12
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	f1 f7       	brne	.-4      	; 0x122a <CreatePassword+0x158>
    122e:	9a 8b       	std	Y+18, r25	; 0x12
    1230:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1232:	8b 89       	ldd	r24, Y+19	; 0x13
    1234:	9c 89       	ldd	r25, Y+20	; 0x14
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	9c 8b       	std	Y+20, r25	; 0x14
    123a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    123c:	8b 89       	ldd	r24, Y+19	; 0x13
    123e:	9c 89       	ldd	r25, Y+20	; 0x14
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	69 f7       	brne	.-38     	; 0x121e <CreatePassword+0x14c>
    1244:	14 c0       	rjmp	.+40     	; 0x126e <CreatePassword+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1246:	6d 89       	ldd	r22, Y+21	; 0x15
    1248:	7e 89       	ldd	r23, Y+22	; 0x16
    124a:	8f 89       	ldd	r24, Y+23	; 0x17
    124c:	98 8d       	ldd	r25, Y+24	; 0x18
    124e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	9c 8b       	std	Y+20, r25	; 0x14
    1258:	8b 8b       	std	Y+19, r24	; 0x13
    125a:	8b 89       	ldd	r24, Y+19	; 0x13
    125c:	9c 89       	ldd	r25, Y+20	; 0x14
    125e:	98 8b       	std	Y+16, r25	; 0x10
    1260:	8f 87       	std	Y+15, r24	; 0x0f
    1262:	8f 85       	ldd	r24, Y+15	; 0x0f
    1264:	98 89       	ldd	r25, Y+16	; 0x10
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <CreatePassword+0x194>
    126a:	98 8b       	std	Y+16, r25	; 0x10
    126c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3000);/*delay for vision*/
		CreatePassword();
    126e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <CreatePassword>
    1272:	83 c0       	rjmp	.+262    	; 0x137a <CreatePassword+0x2a8>
	}

	/*if 2 matched passwords are entered*/
	else if(CheckPass==MATCHED_PASSWORDS)
    1274:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1276:	84 31       	cpi	r24, 0x14	; 20
    1278:	09 f0       	breq	.+2      	; 0x127c <CreatePassword+0x1aa>
    127a:	7f c0       	rjmp	.+254    	; 0x137a <CreatePassword+0x2a8>
		{
			LCD_clearScreen();
    127c:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clearScreen>
			LCD_displayString("Password created");
    1280:	82 ed       	ldi	r24, 0xD2	; 210
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0e 94 c2 19 	call	0x3384	; 0x3384 <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"successfully");
    1288:	23 ee       	ldi	r18, 0xE3	; 227
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	0e 94 2d 1a 	call	0x345a	; 0x345a <LCD_displayStringRowColumn>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e8       	ldi	r25, 0x80	; 128
    129a:	ab eb       	ldi	r26, 0xBB	; 187
    129c:	b4 e4       	ldi	r27, 0x44	; 68
    129e:	8b 87       	std	Y+11, r24	; 0x0b
    12a0:	9c 87       	std	Y+12, r25	; 0x0c
    12a2:	ad 87       	std	Y+13, r26	; 0x0d
    12a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	4a ef       	ldi	r20, 0xFA	; 250
    12b4:	54 e4       	ldi	r21, 0x44	; 68
    12b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	8f 83       	std	Y+7, r24	; 0x07
    12c0:	98 87       	std	Y+8, r25	; 0x08
    12c2:	a9 87       	std	Y+9, r26	; 0x09
    12c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c6:	6f 81       	ldd	r22, Y+7	; 0x07
    12c8:	78 85       	ldd	r23, Y+8	; 0x08
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e8       	ldi	r20, 0x80	; 128
    12d4:	5f e3       	ldi	r21, 0x3F	; 63
    12d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12da:	88 23       	and	r24, r24
    12dc:	2c f4       	brge	.+10     	; 0x12e8 <CreatePassword+0x216>
		__ticks = 1;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	8d 83       	std	Y+5, r24	; 0x05
    12e6:	3f c0       	rjmp	.+126    	; 0x1366 <CreatePassword+0x294>
	else if (__tmp > 65535)
    12e8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ea:	78 85       	ldd	r23, Y+8	; 0x08
    12ec:	89 85       	ldd	r24, Y+9	; 0x09
    12ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	3f ef       	ldi	r19, 0xFF	; 255
    12f4:	4f e7       	ldi	r20, 0x7F	; 127
    12f6:	57 e4       	ldi	r21, 0x47	; 71
    12f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fc:	18 16       	cp	r1, r24
    12fe:	4c f5       	brge	.+82     	; 0x1352 <CreatePassword+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1300:	6b 85       	ldd	r22, Y+11	; 0x0b
    1302:	7c 85       	ldd	r23, Y+12	; 0x0c
    1304:	8d 85       	ldd	r24, Y+13	; 0x0d
    1306:	9e 85       	ldd	r25, Y+14	; 0x0e
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e2       	ldi	r20, 0x20	; 32
    130e:	51 e4       	ldi	r21, 0x41	; 65
    1310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	bc 01       	movw	r22, r24
    131a:	cd 01       	movw	r24, r26
    131c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	9e 83       	std	Y+6, r25	; 0x06
    1326:	8d 83       	std	Y+5, r24	; 0x05
    1328:	0f c0       	rjmp	.+30     	; 0x1348 <CreatePassword+0x276>
    132a:	88 ec       	ldi	r24, 0xC8	; 200
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	9c 83       	std	Y+4, r25	; 0x04
    1330:	8b 83       	std	Y+3, r24	; 0x03
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <CreatePassword+0x264>
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	69 f7       	brne	.-38     	; 0x132a <CreatePassword+0x258>
    1350:	14 c0       	rjmp	.+40     	; 0x137a <CreatePassword+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1352:	6f 81       	ldd	r22, Y+7	; 0x07
    1354:	78 85       	ldd	r23, Y+8	; 0x08
    1356:	89 85       	ldd	r24, Y+9	; 0x09
    1358:	9a 85       	ldd	r25, Y+10	; 0x0a
    135a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	8d 83       	std	Y+5, r24	; 0x05
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	9a 83       	std	Y+2, r25	; 0x02
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	f1 f7       	brne	.-4      	; 0x1372 <CreatePassword+0x2a0>
    1376:	9a 83       	std	Y+2, r25	; 0x02
    1378:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1500);/*delay for vision*/
		}
}
    137a:	a7 96       	adiw	r28, 0x27	; 39
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <EXTI_vConfig_>:

void EXTI_vConfig_(uint8 copy_u8Int_No , uint8 copy_u8Dirn_Of_Pin , uint8 copy_u8Sense_Opt)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	29 97       	sbiw	r28, 0x09	; 9
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	6a 83       	std	Y+2, r22	; 0x02
    13a4:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8Int_No )
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	39 87       	std	Y+9, r19	; 0x09
    13ae:	28 87       	std	Y+8, r18	; 0x08
    13b0:	88 85       	ldd	r24, Y+8	; 0x08
    13b2:	99 85       	ldd	r25, Y+9	; 0x09
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	39 f0       	breq	.+14     	; 0x13c6 <EXTI_vConfig_+0x3a>
    13b8:	28 85       	ldd	r18, Y+8	; 0x08
    13ba:	39 85       	ldd	r19, Y+9	; 0x09
    13bc:	21 30       	cpi	r18, 0x01	; 1
    13be:	31 05       	cpc	r19, r1
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <EXTI_vConfig_+0x38>
    13c2:	71 c0       	rjmp	.+226    	; 0x14a6 <EXTI_vConfig_+0x11a>
    13c4:	df c0       	rjmp	.+446    	; 0x1584 <EXTI_vConfig_+0x1f8>
	{
		/*Configuring INT0*/

		case 0 :
			//enabling INT0
			SET_BIT(GICR ,6);
    13c6:	ab e5       	ldi	r26, 0x5B	; 91
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	eb e5       	ldi	r30, 0x5B	; 91
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	80 64       	ori	r24, 0x40	; 64
    13d2:	8c 93       	st	X, r24
			//configuring dirn
			if(copy_u8Dirn_Of_Pin == INPUT)
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	88 23       	and	r24, r24
    13d8:	31 f4       	brne	.+12     	; 0x13e6 <EXTI_vConfig_+0x5a>
				GPIO_setupPinDirection(PORTD_ID,PIN2_ID,PIN_INPUT);
    13da:	83 e0       	ldi	r24, 0x03	; 3
    13dc:	62 e0       	ldi	r22, 0x02	; 2
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
    13e4:	05 c0       	rjmp	.+10     	; 0x13f0 <EXTI_vConfig_+0x64>
			else
				GPIO_setupPinDirection(PORTD_ID,PIN2_ID,PIN_OUTPUT);
    13e6:	83 e0       	ldi	r24, 0x03	; 3
    13e8:	62 e0       	ldi	r22, 0x02	; 2
    13ea:	41 e0       	ldi	r20, 0x01	; 1
    13ec:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
			//configuring sensing options
			switch(copy_u8Sense_Opt)
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	3f 83       	std	Y+7, r19	; 0x07
    13f8:	2e 83       	std	Y+6, r18	; 0x06
    13fa:	8e 81       	ldd	r24, Y+6	; 0x06
    13fc:	9f 81       	ldd	r25, Y+7	; 0x07
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	91 05       	cpc	r25, r1
    1402:	21 f1       	breq	.+72     	; 0x144c <EXTI_vConfig_+0xc0>
    1404:	2e 81       	ldd	r18, Y+6	; 0x06
    1406:	3f 81       	ldd	r19, Y+7	; 0x07
    1408:	22 30       	cpi	r18, 0x02	; 2
    140a:	31 05       	cpc	r19, r1
    140c:	2c f4       	brge	.+10     	; 0x1418 <EXTI_vConfig_+0x8c>
    140e:	8e 81       	ldd	r24, Y+6	; 0x06
    1410:	9f 81       	ldd	r25, Y+7	; 0x07
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	61 f0       	breq	.+24     	; 0x142e <EXTI_vConfig_+0xa2>
    1416:	b6 c0       	rjmp	.+364    	; 0x1584 <EXTI_vConfig_+0x1f8>
    1418:	2e 81       	ldd	r18, Y+6	; 0x06
    141a:	3f 81       	ldd	r19, Y+7	; 0x07
    141c:	22 30       	cpi	r18, 0x02	; 2
    141e:	31 05       	cpc	r19, r1
    1420:	21 f1       	breq	.+72     	; 0x146a <EXTI_vConfig_+0xde>
    1422:	8e 81       	ldd	r24, Y+6	; 0x06
    1424:	9f 81       	ldd	r25, Y+7	; 0x07
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	91 05       	cpc	r25, r1
    142a:	71 f1       	breq	.+92     	; 0x1488 <EXTI_vConfig_+0xfc>
    142c:	ab c0       	rjmp	.+342    	; 0x1584 <EXTI_vConfig_+0x1f8>
			{
				case 0 :
					CLEAR_BIT(MCUCR , 0);
    142e:	a5 e5       	ldi	r26, 0x55	; 85
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e5 e5       	ldi	r30, 0x55	; 85
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8e 7f       	andi	r24, 0xFE	; 254
    143a:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR , 1);
    143c:	a5 e5       	ldi	r26, 0x55	; 85
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e5 e5       	ldi	r30, 0x55	; 85
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8d 7f       	andi	r24, 0xFD	; 253
    1448:	8c 93       	st	X, r24
    144a:	9c c0       	rjmp	.+312    	; 0x1584 <EXTI_vConfig_+0x1f8>
				break;
				case 1 :
					CLEAR_BIT(MCUCR , 1);
    144c:	a5 e5       	ldi	r26, 0x55	; 85
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e5 e5       	ldi	r30, 0x55	; 85
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	8d 7f       	andi	r24, 0xFD	; 253
    1458:	8c 93       	st	X, r24
					SET_BIT(MCUCR , 0);
    145a:	a5 e5       	ldi	r26, 0x55	; 85
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e5 e5       	ldi	r30, 0x55	; 85
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	81 60       	ori	r24, 0x01	; 1
    1466:	8c 93       	st	X, r24
    1468:	8d c0       	rjmp	.+282    	; 0x1584 <EXTI_vConfig_+0x1f8>
				break;
				case 2 :
					CLEAR_BIT(MCUCR , 0);
    146a:	a5 e5       	ldi	r26, 0x55	; 85
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e5 e5       	ldi	r30, 0x55	; 85
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	8e 7f       	andi	r24, 0xFE	; 254
    1476:	8c 93       	st	X, r24
					SET_BIT(MCUCR , 1);
    1478:	a5 e5       	ldi	r26, 0x55	; 85
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e5 e5       	ldi	r30, 0x55	; 85
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	82 60       	ori	r24, 0x02	; 2
    1484:	8c 93       	st	X, r24
    1486:	7e c0       	rjmp	.+252    	; 0x1584 <EXTI_vConfig_+0x1f8>
				break;
				case 3 :
					SET_BIT(MCUCR , 0);
    1488:	a5 e5       	ldi	r26, 0x55	; 85
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e5 e5       	ldi	r30, 0x55	; 85
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	81 60       	ori	r24, 0x01	; 1
    1494:	8c 93       	st	X, r24
					SET_BIT(MCUCR , 1);
    1496:	a5 e5       	ldi	r26, 0x55	; 85
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e5 e5       	ldi	r30, 0x55	; 85
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	82 60       	ori	r24, 0x02	; 2
    14a2:	8c 93       	st	X, r24
    14a4:	6f c0       	rjmp	.+222    	; 0x1584 <EXTI_vConfig_+0x1f8>
		/*Configuring INT1*/

		case 1 :
			//enabling INT1

			SET_BIT(GICR ,7);
    14a6:	ab e5       	ldi	r26, 0x5B	; 91
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	eb e5       	ldi	r30, 0x5B	; 91
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	80 68       	ori	r24, 0x80	; 128
    14b2:	8c 93       	st	X, r24

			//configuring dirn

			if(copy_u8Dirn_Of_Pin == INPUT)
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	88 23       	and	r24, r24
    14b8:	31 f4       	brne	.+12     	; 0x14c6 <EXTI_vConfig_+0x13a>
				GPIO_setupPinDirection(PORTD_ID,PIN3_ID,PIN_INPUT);
    14ba:	83 e0       	ldi	r24, 0x03	; 3
    14bc:	63 e0       	ldi	r22, 0x03	; 3
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
    14c4:	05 c0       	rjmp	.+10     	; 0x14d0 <EXTI_vConfig_+0x144>
			else
				GPIO_setupPinDirection(PORTD_ID,PIN3_ID,PIN_OUTPUT);
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	63 e0       	ldi	r22, 0x03	; 3
    14ca:	41 e0       	ldi	r20, 0x01	; 1
    14cc:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
		//configuring sensing options
			switch(copy_u8Sense_Opt)
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	3d 83       	std	Y+5, r19	; 0x05
    14d8:	2c 83       	std	Y+4, r18	; 0x04
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	9d 81       	ldd	r25, Y+5	; 0x05
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	91 05       	cpc	r25, r1
    14e2:	21 f1       	breq	.+72     	; 0x152c <EXTI_vConfig_+0x1a0>
    14e4:	2c 81       	ldd	r18, Y+4	; 0x04
    14e6:	3d 81       	ldd	r19, Y+5	; 0x05
    14e8:	22 30       	cpi	r18, 0x02	; 2
    14ea:	31 05       	cpc	r19, r1
    14ec:	2c f4       	brge	.+10     	; 0x14f8 <EXTI_vConfig_+0x16c>
    14ee:	8c 81       	ldd	r24, Y+4	; 0x04
    14f0:	9d 81       	ldd	r25, Y+5	; 0x05
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	61 f0       	breq	.+24     	; 0x150e <EXTI_vConfig_+0x182>
    14f6:	46 c0       	rjmp	.+140    	; 0x1584 <EXTI_vConfig_+0x1f8>
    14f8:	2c 81       	ldd	r18, Y+4	; 0x04
    14fa:	3d 81       	ldd	r19, Y+5	; 0x05
    14fc:	22 30       	cpi	r18, 0x02	; 2
    14fe:	31 05       	cpc	r19, r1
    1500:	21 f1       	breq	.+72     	; 0x154a <EXTI_vConfig_+0x1be>
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	9d 81       	ldd	r25, Y+5	; 0x05
    1506:	83 30       	cpi	r24, 0x03	; 3
    1508:	91 05       	cpc	r25, r1
    150a:	71 f1       	breq	.+92     	; 0x1568 <EXTI_vConfig_+0x1dc>
    150c:	3b c0       	rjmp	.+118    	; 0x1584 <EXTI_vConfig_+0x1f8>
			{
				case 0 :
					CLEAR_BIT(MCUCR , 2);
    150e:	a5 e5       	ldi	r26, 0x55	; 85
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e5 e5       	ldi	r30, 0x55	; 85
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	8b 7f       	andi	r24, 0xFB	; 251
    151a:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR , 3);
    151c:	a5 e5       	ldi	r26, 0x55	; 85
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e5 e5       	ldi	r30, 0x55	; 85
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	87 7f       	andi	r24, 0xF7	; 247
    1528:	8c 93       	st	X, r24
    152a:	2c c0       	rjmp	.+88     	; 0x1584 <EXTI_vConfig_+0x1f8>
				break;
				case 1 :
					CLEAR_BIT(MCUCR , 3);
    152c:	a5 e5       	ldi	r26, 0x55	; 85
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e5 e5       	ldi	r30, 0x55	; 85
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	87 7f       	andi	r24, 0xF7	; 247
    1538:	8c 93       	st	X, r24
					SET_BIT(MCUCR , 2);
    153a:	a5 e5       	ldi	r26, 0x55	; 85
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e5 e5       	ldi	r30, 0x55	; 85
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	84 60       	ori	r24, 0x04	; 4
    1546:	8c 93       	st	X, r24
    1548:	1d c0       	rjmp	.+58     	; 0x1584 <EXTI_vConfig_+0x1f8>
				break;
				case 2 :
					CLEAR_BIT(MCUCR , 2);
    154a:	a5 e5       	ldi	r26, 0x55	; 85
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e5 e5       	ldi	r30, 0x55	; 85
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8b 7f       	andi	r24, 0xFB	; 251
    1556:	8c 93       	st	X, r24
					SET_BIT(MCUCR , 3);
    1558:	a5 e5       	ldi	r26, 0x55	; 85
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e5 e5       	ldi	r30, 0x55	; 85
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	88 60       	ori	r24, 0x08	; 8
    1564:	8c 93       	st	X, r24
    1566:	0e c0       	rjmp	.+28     	; 0x1584 <EXTI_vConfig_+0x1f8>
				break;
				case 3 :
					SET_BIT(MCUCR , 2);
    1568:	a5 e5       	ldi	r26, 0x55	; 85
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e5 e5       	ldi	r30, 0x55	; 85
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	84 60       	ori	r24, 0x04	; 4
    1574:	8c 93       	st	X, r24
					SET_BIT(MCUCR , 3);
    1576:	a5 e5       	ldi	r26, 0x55	; 85
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e5 e5       	ldi	r30, 0x55	; 85
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	88 60       	ori	r24, 0x08	; 8
    1582:	8c 93       	st	X, r24
				break;
			}
		break;
	}
}
    1584:	29 96       	adiw	r28, 0x09	; 9
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <changeToAvailableOnLCD>:
void changeToAvailableOnLCD(void)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
	/*change the garage state to Available*/
	LCD_moveCursor(1,7);
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	67 e0       	ldi	r22, 0x07	; 7
    15a2:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <LCD_moveCursor>
	LCD_displayString("Available");
    15a6:	80 ef       	ldi	r24, 0xF0	; 240
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	0e 94 c2 19 	call	0x3384	; 0x3384 <LCD_displayString>
}
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <Exit_TheCar>:

void Exit_TheCar(void)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	/*Rotating the servo motor to open the arm gate*/
	SERVO_MOTOR_vRotate_90ClockWise();
    15bc:	0e 94 b0 05 	call	0xb60	; 0xb60 <SERVO_MOTOR_vRotate_90ClockWise>

	/*wait the car to pass the arm */
	while (!GPIO_readPin(PORTD_ID,PIN3_ID));
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	63 e0       	ldi	r22, 0x03	; 3
    15c4:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <GPIO_readPin>
    15c8:	88 23       	and	r24, r24
    15ca:	d1 f3       	breq	.-12     	; 0x15c0 <Exit_TheCar+0xc>

	/*Rotating the servo motor to close the arm gate*/
	SERVO_MOTOR_vRotate_90Anti_ClockWise();
    15cc:	0e 94 bb 05 	call	0xb76	; 0xb76 <SERVO_MOTOR_vRotate_90Anti_ClockWise>
}
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	00 d0       	rcall	.+0      	; 0x15dc <ADC_init+0x6>
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	9a 83       	std	Y+2, r25	; 0x02
    15e2:	89 83       	std	Y+1, r24	; 0x01
	 * REFS1:0 = 01 to choose AVCC = 5v as reference voltage
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	 /*insert value of ref volt in last 2 bits (REFS1 , REFS0) of ADMUX register */
	ADMUX = ( (ADMUX & 0x3F) | (Config_Ptr->ref_volt <<6) );
    15e4:	a7 e2       	ldi	r26, 0x27	; 39
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e7 e2       	ldi	r30, 0x27	; 39
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	28 2f       	mov	r18, r24
    15f0:	2f 73       	andi	r18, 0x3F	; 63
    15f2:	e9 81       	ldd	r30, Y+1	; 0x01
    15f4:	fa 81       	ldd	r31, Y+2	; 0x02
    15f6:	80 81       	ld	r24, Z
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	00 24       	eor	r0, r0
    15fe:	96 95       	lsr	r25
    1600:	87 95       	ror	r24
    1602:	07 94       	ror	r0
    1604:	96 95       	lsr	r25
    1606:	87 95       	ror	r24
    1608:	07 94       	ror	r0
    160a:	98 2f       	mov	r25, r24
    160c:	80 2d       	mov	r24, r0
    160e:	82 2b       	or	r24, r18
    1610:	8c 93       	st	X, r24
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	/*insert value of prescaler in first 3 bits (ADPS2,ADPS1,ADPS0) of ADCSRA register*/
	ADCSRA = ( (ADCSRA & 0xF8) | (Config_Ptr ->prescaler) );
    1612:	a6 e2       	ldi	r26, 0x26	; 38
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e6 e2       	ldi	r30, 0x26	; 38
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	98 2f       	mov	r25, r24
    161e:	98 7f       	andi	r25, 0xF8	; 248
    1620:	e9 81       	ldd	r30, Y+1	; 0x01
    1622:	fa 81       	ldd	r31, Y+2	; 0x02
    1624:	81 81       	ldd	r24, Z+1	; 0x01
    1626:	89 2b       	or	r24, r25
    1628:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADEN); /*enable ADC*/
    162a:	a6 e2       	ldi	r26, 0x26	; 38
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e6 e2       	ldi	r30, 0x26	; 38
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	80 68       	ori	r24, 0x80	; 128
    1636:	8c 93       	st	X, r24
}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	0f 92       	push	r0
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX= ((ADMUX & 0xE0) | (channel_num & 0x1F));/*insert channel num in 1st 5bits in ADMUX MUX4:0*/
    164e:	a7 e2       	ldi	r26, 0x27	; 39
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e7 e2       	ldi	r30, 0x27	; 39
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	98 2f       	mov	r25, r24
    165a:	90 7e       	andi	r25, 0xE0	; 224
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	8f 71       	andi	r24, 0x1F	; 31
    1660:	89 2b       	or	r24, r25
    1662:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
    1664:	a6 e2       	ldi	r26, 0x26	; 38
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e6 e2       	ldi	r30, 0x26	; 38
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	80 64       	ori	r24, 0x40	; 64
    1670:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* (polling)Wait for conversion to complete, ADIF becomes '1' */
    1672:	e6 e2       	ldi	r30, 0x26	; 38
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	88 2f       	mov	r24, r24
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	80 71       	andi	r24, 0x10	; 16
    167e:	90 70       	andi	r25, 0x00	; 0
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	b9 f3       	breq	.-18     	; 0x1672 <ADC_readChannel+0x30>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
    1684:	a6 e2       	ldi	r26, 0x26	; 38
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e6 e2       	ldi	r30, 0x26	; 38
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	80 61       	ori	r24, 0x10	; 16
    1690:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    1692:	e4 e2       	ldi	r30, 0x24	; 36
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	91 81       	ldd	r25, Z+1	; 0x01
}
    169a:	0f 90       	pop	r0
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <GPIO_setupPinDirection+0x6>
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <GPIO_setupPinDirection+0x8>
    16aa:	0f 92       	push	r0
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	89 83       	std	Y+1, r24	; 0x01
    16b2:	6a 83       	std	Y+2, r22	; 0x02
    16b4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	88 30       	cpi	r24, 0x08	; 8
    16ba:	08 f0       	brcs	.+2      	; 0x16be <GPIO_setupPinDirection+0x1c>
    16bc:	d5 c0       	rjmp	.+426    	; 0x1868 <GPIO_setupPinDirection+0x1c6>
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	84 30       	cpi	r24, 0x04	; 4
    16c2:	08 f0       	brcs	.+2      	; 0x16c6 <GPIO_setupPinDirection+0x24>
    16c4:	d1 c0       	rjmp	.+418    	; 0x1868 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	3d 83       	std	Y+5, r19	; 0x05
    16ce:	2c 83       	std	Y+4, r18	; 0x04
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	9d 81       	ldd	r25, Y+5	; 0x05
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	91 05       	cpc	r25, r1
    16d8:	09 f4       	brne	.+2      	; 0x16dc <GPIO_setupPinDirection+0x3a>
    16da:	43 c0       	rjmp	.+134    	; 0x1762 <GPIO_setupPinDirection+0xc0>
    16dc:	2c 81       	ldd	r18, Y+4	; 0x04
    16de:	3d 81       	ldd	r19, Y+5	; 0x05
    16e0:	22 30       	cpi	r18, 0x02	; 2
    16e2:	31 05       	cpc	r19, r1
    16e4:	2c f4       	brge	.+10     	; 0x16f0 <GPIO_setupPinDirection+0x4e>
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	71 f0       	breq	.+28     	; 0x170a <GPIO_setupPinDirection+0x68>
    16ee:	bc c0       	rjmp	.+376    	; 0x1868 <GPIO_setupPinDirection+0x1c6>
    16f0:	2c 81       	ldd	r18, Y+4	; 0x04
    16f2:	3d 81       	ldd	r19, Y+5	; 0x05
    16f4:	22 30       	cpi	r18, 0x02	; 2
    16f6:	31 05       	cpc	r19, r1
    16f8:	09 f4       	brne	.+2      	; 0x16fc <GPIO_setupPinDirection+0x5a>
    16fa:	5f c0       	rjmp	.+190    	; 0x17ba <GPIO_setupPinDirection+0x118>
    16fc:	8c 81       	ldd	r24, Y+4	; 0x04
    16fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1700:	83 30       	cpi	r24, 0x03	; 3
    1702:	91 05       	cpc	r25, r1
    1704:	09 f4       	brne	.+2      	; 0x1708 <GPIO_setupPinDirection+0x66>
    1706:	85 c0       	rjmp	.+266    	; 0x1812 <GPIO_setupPinDirection+0x170>
    1708:	af c0       	rjmp	.+350    	; 0x1868 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	a1 f4       	brne	.+40     	; 0x1738 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1710:	aa e3       	ldi	r26, 0x3A	; 58
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	ea e3       	ldi	r30, 0x3A	; 58
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	48 2f       	mov	r20, r24
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 2e       	mov	r0, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <GPIO_setupPinDirection+0x8c>
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	0a 94       	dec	r0
    1730:	e2 f7       	brpl	.-8      	; 0x172a <GPIO_setupPinDirection+0x88>
    1732:	84 2b       	or	r24, r20
    1734:	8c 93       	st	X, r24
    1736:	98 c0       	rjmp	.+304    	; 0x1868 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1738:	aa e3       	ldi	r26, 0x3A	; 58
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	ea e3       	ldi	r30, 0x3A	; 58
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	48 2f       	mov	r20, r24
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	02 2e       	mov	r0, r18
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <GPIO_setupPinDirection+0xb4>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	0a 94       	dec	r0
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <GPIO_setupPinDirection+0xb0>
    175a:	80 95       	com	r24
    175c:	84 23       	and	r24, r20
    175e:	8c 93       	st	X, r24
    1760:	83 c0       	rjmp	.+262    	; 0x1868 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	a1 f4       	brne	.+40     	; 0x1790 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1768:	a7 e3       	ldi	r26, 0x37	; 55
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e7 e3       	ldi	r30, 0x37	; 55
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	48 2f       	mov	r20, r24
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 2e       	mov	r0, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <GPIO_setupPinDirection+0xe4>
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	0a 94       	dec	r0
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <GPIO_setupPinDirection+0xe0>
    178a:	84 2b       	or	r24, r20
    178c:	8c 93       	st	X, r24
    178e:	6c c0       	rjmp	.+216    	; 0x1868 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1790:	a7 e3       	ldi	r26, 0x37	; 55
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e7 e3       	ldi	r30, 0x37	; 55
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <GPIO_setupPinDirection+0x10c>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <GPIO_setupPinDirection+0x108>
    17b2:	80 95       	com	r24
    17b4:	84 23       	and	r24, r20
    17b6:	8c 93       	st	X, r24
    17b8:	57 c0       	rjmp	.+174    	; 0x1868 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	a1 f4       	brne	.+40     	; 0x17e8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    17c0:	a4 e3       	ldi	r26, 0x34	; 52
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e4 e3       	ldi	r30, 0x34	; 52
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	48 2f       	mov	r20, r24
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 2e       	mov	r0, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <GPIO_setupPinDirection+0x13c>
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	0a 94       	dec	r0
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <GPIO_setupPinDirection+0x138>
    17e2:	84 2b       	or	r24, r20
    17e4:	8c 93       	st	X, r24
    17e6:	40 c0       	rjmp	.+128    	; 0x1868 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    17e8:	a4 e3       	ldi	r26, 0x34	; 52
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e4 e3       	ldi	r30, 0x34	; 52
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	48 2f       	mov	r20, r24
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	02 2e       	mov	r0, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <GPIO_setupPinDirection+0x164>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	0a 94       	dec	r0
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <GPIO_setupPinDirection+0x160>
    180a:	80 95       	com	r24
    180c:	84 23       	and	r24, r20
    180e:	8c 93       	st	X, r24
    1810:	2b c0       	rjmp	.+86     	; 0x1868 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	a1 f4       	brne	.+40     	; 0x1840 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1818:	a1 e3       	ldi	r26, 0x31	; 49
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e1 e3       	ldi	r30, 0x31	; 49
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	48 2f       	mov	r20, r24
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 2e       	mov	r0, r18
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <GPIO_setupPinDirection+0x194>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	0a 94       	dec	r0
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <GPIO_setupPinDirection+0x190>
    183a:	84 2b       	or	r24, r20
    183c:	8c 93       	st	X, r24
    183e:	14 c0       	rjmp	.+40     	; 0x1868 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1840:	a1 e3       	ldi	r26, 0x31	; 49
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e1 e3       	ldi	r30, 0x31	; 49
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 2e       	mov	r0, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <GPIO_setupPinDirection+0x1bc>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <GPIO_setupPinDirection+0x1b8>
    1862:	80 95       	com	r24
    1864:	84 23       	and	r24, r20
    1866:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	00 d0       	rcall	.+0      	; 0x187e <GPIO_writePin+0x6>
    187e:	00 d0       	rcall	.+0      	; 0x1880 <GPIO_writePin+0x8>
    1880:	0f 92       	push	r0
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	6a 83       	std	Y+2, r22	; 0x02
    188a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	88 30       	cpi	r24, 0x08	; 8
    1890:	08 f0       	brcs	.+2      	; 0x1894 <GPIO_writePin+0x1c>
    1892:	d5 c0       	rjmp	.+426    	; 0x1a3e <GPIO_writePin+0x1c6>
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	84 30       	cpi	r24, 0x04	; 4
    1898:	08 f0       	brcs	.+2      	; 0x189c <GPIO_writePin+0x24>
    189a:	d1 c0       	rjmp	.+418    	; 0x1a3e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	3d 83       	std	Y+5, r19	; 0x05
    18a4:	2c 83       	std	Y+4, r18	; 0x04
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	9d 81       	ldd	r25, Y+5	; 0x05
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	91 05       	cpc	r25, r1
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <GPIO_writePin+0x3a>
    18b0:	43 c0       	rjmp	.+134    	; 0x1938 <GPIO_writePin+0xc0>
    18b2:	2c 81       	ldd	r18, Y+4	; 0x04
    18b4:	3d 81       	ldd	r19, Y+5	; 0x05
    18b6:	22 30       	cpi	r18, 0x02	; 2
    18b8:	31 05       	cpc	r19, r1
    18ba:	2c f4       	brge	.+10     	; 0x18c6 <GPIO_writePin+0x4e>
    18bc:	8c 81       	ldd	r24, Y+4	; 0x04
    18be:	9d 81       	ldd	r25, Y+5	; 0x05
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	71 f0       	breq	.+28     	; 0x18e0 <GPIO_writePin+0x68>
    18c4:	bc c0       	rjmp	.+376    	; 0x1a3e <GPIO_writePin+0x1c6>
    18c6:	2c 81       	ldd	r18, Y+4	; 0x04
    18c8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ca:	22 30       	cpi	r18, 0x02	; 2
    18cc:	31 05       	cpc	r19, r1
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <GPIO_writePin+0x5a>
    18d0:	5f c0       	rjmp	.+190    	; 0x1990 <GPIO_writePin+0x118>
    18d2:	8c 81       	ldd	r24, Y+4	; 0x04
    18d4:	9d 81       	ldd	r25, Y+5	; 0x05
    18d6:	83 30       	cpi	r24, 0x03	; 3
    18d8:	91 05       	cpc	r25, r1
    18da:	09 f4       	brne	.+2      	; 0x18de <GPIO_writePin+0x66>
    18dc:	85 c0       	rjmp	.+266    	; 0x19e8 <GPIO_writePin+0x170>
    18de:	af c0       	rjmp	.+350    	; 0x1a3e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	a1 f4       	brne	.+40     	; 0x190e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    18e6:	ab e3       	ldi	r26, 0x3B	; 59
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	eb e3       	ldi	r30, 0x3B	; 59
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <GPIO_writePin+0x8c>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <GPIO_writePin+0x88>
    1908:	84 2b       	or	r24, r20
    190a:	8c 93       	st	X, r24
    190c:	98 c0       	rjmp	.+304    	; 0x1a3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    190e:	ab e3       	ldi	r26, 0x3B	; 59
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	eb e3       	ldi	r30, 0x3B	; 59
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 2e       	mov	r0, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <GPIO_writePin+0xb4>
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	0a 94       	dec	r0
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <GPIO_writePin+0xb0>
    1930:	80 95       	com	r24
    1932:	84 23       	and	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	83 c0       	rjmp	.+262    	; 0x1a3e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	a1 f4       	brne	.+40     	; 0x1966 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    193e:	a8 e3       	ldi	r26, 0x38	; 56
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e8 e3       	ldi	r30, 0x38	; 56
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	48 2f       	mov	r20, r24
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 2e       	mov	r0, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <GPIO_writePin+0xe4>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <GPIO_writePin+0xe0>
    1960:	84 2b       	or	r24, r20
    1962:	8c 93       	st	X, r24
    1964:	6c c0       	rjmp	.+216    	; 0x1a3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1966:	a8 e3       	ldi	r26, 0x38	; 56
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e8 e3       	ldi	r30, 0x38	; 56
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <GPIO_writePin+0x10c>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <GPIO_writePin+0x108>
    1988:	80 95       	com	r24
    198a:	84 23       	and	r24, r20
    198c:	8c 93       	st	X, r24
    198e:	57 c0       	rjmp	.+174    	; 0x1a3e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	a1 f4       	brne	.+40     	; 0x19be <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1996:	a5 e3       	ldi	r26, 0x35	; 53
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e5 e3       	ldi	r30, 0x35	; 53
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	48 2f       	mov	r20, r24
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 2e       	mov	r0, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <GPIO_writePin+0x13c>
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	0a 94       	dec	r0
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <GPIO_writePin+0x138>
    19b8:	84 2b       	or	r24, r20
    19ba:	8c 93       	st	X, r24
    19bc:	40 c0       	rjmp	.+128    	; 0x1a3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    19be:	a5 e3       	ldi	r26, 0x35	; 53
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e5 e3       	ldi	r30, 0x35	; 53
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	48 2f       	mov	r20, r24
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 2e       	mov	r0, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <GPIO_writePin+0x164>
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	0a 94       	dec	r0
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <GPIO_writePin+0x160>
    19e0:	80 95       	com	r24
    19e2:	84 23       	and	r24, r20
    19e4:	8c 93       	st	X, r24
    19e6:	2b c0       	rjmp	.+86     	; 0x1a3e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	81 30       	cpi	r24, 0x01	; 1
    19ec:	a1 f4       	brne	.+40     	; 0x1a16 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    19ee:	a2 e3       	ldi	r26, 0x32	; 50
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e2 e3       	ldi	r30, 0x32	; 50
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	48 2f       	mov	r20, r24
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	02 2e       	mov	r0, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <GPIO_writePin+0x194>
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	0a 94       	dec	r0
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <GPIO_writePin+0x190>
    1a10:	84 2b       	or	r24, r20
    1a12:	8c 93       	st	X, r24
    1a14:	14 c0       	rjmp	.+40     	; 0x1a3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1a16:	a2 e3       	ldi	r26, 0x32	; 50
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e2 e3       	ldi	r30, 0x32	; 50
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	48 2f       	mov	r20, r24
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	02 2e       	mov	r0, r18
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <GPIO_writePin+0x1bc>
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	0a 94       	dec	r0
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <GPIO_writePin+0x1b8>
    1a38:	80 95       	com	r24
    1a3a:	84 23       	and	r24, r20
    1a3c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <GPIO_readPin+0x6>
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <GPIO_readPin+0x8>
    1a56:	0f 92       	push	r0
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	8a 83       	std	Y+2, r24	; 0x02
    1a5e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1a60:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	88 30       	cpi	r24, 0x08	; 8
    1a66:	08 f0       	brcs	.+2      	; 0x1a6a <GPIO_readPin+0x1c>
    1a68:	84 c0       	rjmp	.+264    	; 0x1b72 <GPIO_readPin+0x124>
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	84 30       	cpi	r24, 0x04	; 4
    1a6e:	08 f0       	brcs	.+2      	; 0x1a72 <GPIO_readPin+0x24>
    1a70:	80 c0       	rjmp	.+256    	; 0x1b72 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	3d 83       	std	Y+5, r19	; 0x05
    1a7a:	2c 83       	std	Y+4, r18	; 0x04
    1a7c:	4c 81       	ldd	r20, Y+4	; 0x04
    1a7e:	5d 81       	ldd	r21, Y+5	; 0x05
    1a80:	41 30       	cpi	r20, 0x01	; 1
    1a82:	51 05       	cpc	r21, r1
    1a84:	79 f1       	breq	.+94     	; 0x1ae4 <GPIO_readPin+0x96>
    1a86:	8c 81       	ldd	r24, Y+4	; 0x04
    1a88:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	34 f4       	brge	.+12     	; 0x1a9c <GPIO_readPin+0x4e>
    1a90:	2c 81       	ldd	r18, Y+4	; 0x04
    1a92:	3d 81       	ldd	r19, Y+5	; 0x05
    1a94:	21 15       	cp	r18, r1
    1a96:	31 05       	cpc	r19, r1
    1a98:	69 f0       	breq	.+26     	; 0x1ab4 <GPIO_readPin+0x66>
    1a9a:	6b c0       	rjmp	.+214    	; 0x1b72 <GPIO_readPin+0x124>
    1a9c:	4c 81       	ldd	r20, Y+4	; 0x04
    1a9e:	5d 81       	ldd	r21, Y+5	; 0x05
    1aa0:	42 30       	cpi	r20, 0x02	; 2
    1aa2:	51 05       	cpc	r21, r1
    1aa4:	b9 f1       	breq	.+110    	; 0x1b14 <GPIO_readPin+0xc6>
    1aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aaa:	83 30       	cpi	r24, 0x03	; 3
    1aac:	91 05       	cpc	r25, r1
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <GPIO_readPin+0x64>
    1ab0:	49 c0       	rjmp	.+146    	; 0x1b44 <GPIO_readPin+0xf6>
    1ab2:	5f c0       	rjmp	.+190    	; 0x1b72 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1ab4:	e9 e3       	ldi	r30, 0x39	; 57
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	88 2f       	mov	r24, r24
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	a9 01       	movw	r20, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <GPIO_readPin+0x7e>
    1ac8:	55 95       	asr	r21
    1aca:	47 95       	ror	r20
    1acc:	8a 95       	dec	r24
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <GPIO_readPin+0x7a>
    1ad0:	ca 01       	movw	r24, r20
    1ad2:	81 70       	andi	r24, 0x01	; 1
    1ad4:	90 70       	andi	r25, 0x00	; 0
    1ad6:	88 23       	and	r24, r24
    1ad8:	19 f0       	breq	.+6      	; 0x1ae0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	49 c0       	rjmp	.+146    	; 0x1b72 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ae0:	19 82       	std	Y+1, r1	; 0x01
    1ae2:	47 c0       	rjmp	.+142    	; 0x1b72 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ae4:	e6 e3       	ldi	r30, 0x36	; 54
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	88 2f       	mov	r24, r24
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a9 01       	movw	r20, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <GPIO_readPin+0xae>
    1af8:	55 95       	asr	r21
    1afa:	47 95       	ror	r20
    1afc:	8a 95       	dec	r24
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <GPIO_readPin+0xaa>
    1b00:	ca 01       	movw	r24, r20
    1b02:	81 70       	andi	r24, 0x01	; 1
    1b04:	90 70       	andi	r25, 0x00	; 0
    1b06:	88 23       	and	r24, r24
    1b08:	19 f0       	breq	.+6      	; 0x1b10 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	31 c0       	rjmp	.+98     	; 0x1b72 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b10:	19 82       	std	Y+1, r1	; 0x01
    1b12:	2f c0       	rjmp	.+94     	; 0x1b72 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1b14:	e3 e3       	ldi	r30, 0x33	; 51
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a9 01       	movw	r20, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <GPIO_readPin+0xde>
    1b28:	55 95       	asr	r21
    1b2a:	47 95       	ror	r20
    1b2c:	8a 95       	dec	r24
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <GPIO_readPin+0xda>
    1b30:	ca 01       	movw	r24, r20
    1b32:	81 70       	andi	r24, 0x01	; 1
    1b34:	90 70       	andi	r25, 0x00	; 0
    1b36:	88 23       	and	r24, r24
    1b38:	19 f0       	breq	.+6      	; 0x1b40 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	19 c0       	rjmp	.+50     	; 0x1b72 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b40:	19 82       	std	Y+1, r1	; 0x01
    1b42:	17 c0       	rjmp	.+46     	; 0x1b72 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b44:	e0 e3       	ldi	r30, 0x30	; 48
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	88 2f       	mov	r24, r24
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a9 01       	movw	r20, r18
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <GPIO_readPin+0x10e>
    1b58:	55 95       	asr	r21
    1b5a:	47 95       	ror	r20
    1b5c:	8a 95       	dec	r24
    1b5e:	e2 f7       	brpl	.-8      	; 0x1b58 <GPIO_readPin+0x10a>
    1b60:	ca 01       	movw	r24, r20
    1b62:	81 70       	andi	r24, 0x01	; 1
    1b64:	90 70       	andi	r25, 0x00	; 0
    1b66:	88 23       	and	r24, r24
    1b68:	19 f0       	breq	.+6      	; 0x1b70 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	01 c0       	rjmp	.+2      	; 0x1b72 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b70:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <GPIO_setupPortDirection+0x6>
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <GPIO_setupPortDirection+0x8>
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	84 30       	cpi	r24, 0x04	; 4
    1b98:	90 f5       	brcc	.+100    	; 0x1bfe <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	3c 83       	std	Y+4, r19	; 0x04
    1ba2:	2b 83       	std	Y+3, r18	; 0x03
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	81 30       	cpi	r24, 0x01	; 1
    1baa:	91 05       	cpc	r25, r1
    1bac:	d1 f0       	breq	.+52     	; 0x1be2 <GPIO_setupPortDirection+0x5e>
    1bae:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb2:	22 30       	cpi	r18, 0x02	; 2
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	2c f4       	brge	.+10     	; 0x1bc2 <GPIO_setupPortDirection+0x3e>
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	61 f0       	breq	.+24     	; 0x1bd8 <GPIO_setupPortDirection+0x54>
    1bc0:	1e c0       	rjmp	.+60     	; 0x1bfe <GPIO_setupPortDirection+0x7a>
    1bc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc6:	22 30       	cpi	r18, 0x02	; 2
    1bc8:	31 05       	cpc	r19, r1
    1bca:	81 f0       	breq	.+32     	; 0x1bec <GPIO_setupPortDirection+0x68>
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd0:	83 30       	cpi	r24, 0x03	; 3
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	81 f0       	breq	.+32     	; 0x1bf6 <GPIO_setupPortDirection+0x72>
    1bd6:	13 c0       	rjmp	.+38     	; 0x1bfe <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1bd8:	ea e3       	ldi	r30, 0x3A	; 58
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	80 83       	st	Z, r24
    1be0:	0e c0       	rjmp	.+28     	; 0x1bfe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1be2:	e7 e3       	ldi	r30, 0x37	; 55
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	80 83       	st	Z, r24
    1bea:	09 c0       	rjmp	.+18     	; 0x1bfe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1bec:	e4 e3       	ldi	r30, 0x34	; 52
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	80 83       	st	Z, r24
    1bf4:	04 c0       	rjmp	.+8      	; 0x1bfe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1bf6:	e1 e3       	ldi	r30, 0x31	; 49
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <GPIO_writePort+0x6>
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <GPIO_writePort+0x8>
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	84 30       	cpi	r24, 0x04	; 4
    1c20:	90 f5       	brcc	.+100    	; 0x1c86 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	3c 83       	std	Y+4, r19	; 0x04
    1c2a:	2b 83       	std	Y+3, r18	; 0x03
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	91 05       	cpc	r25, r1
    1c34:	d1 f0       	breq	.+52     	; 0x1c6a <GPIO_writePort+0x5e>
    1c36:	2b 81       	ldd	r18, Y+3	; 0x03
    1c38:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3a:	22 30       	cpi	r18, 0x02	; 2
    1c3c:	31 05       	cpc	r19, r1
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <GPIO_writePort+0x3e>
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	61 f0       	breq	.+24     	; 0x1c60 <GPIO_writePort+0x54>
    1c48:	1e c0       	rjmp	.+60     	; 0x1c86 <GPIO_writePort+0x7a>
    1c4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4e:	22 30       	cpi	r18, 0x02	; 2
    1c50:	31 05       	cpc	r19, r1
    1c52:	81 f0       	breq	.+32     	; 0x1c74 <GPIO_writePort+0x68>
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	83 30       	cpi	r24, 0x03	; 3
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	81 f0       	breq	.+32     	; 0x1c7e <GPIO_writePort+0x72>
    1c5e:	13 c0       	rjmp	.+38     	; 0x1c86 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c60:	eb e3       	ldi	r30, 0x3B	; 59
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	80 83       	st	Z, r24
    1c68:	0e c0       	rjmp	.+28     	; 0x1c86 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c6a:	e8 e3       	ldi	r30, 0x38	; 56
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	80 83       	st	Z, r24
    1c72:	09 c0       	rjmp	.+18     	; 0x1c86 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c74:	e5 e3       	ldi	r30, 0x35	; 53
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	80 83       	st	Z, r24
    1c7c:	04 c0       	rjmp	.+8      	; 0x1c86 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c7e:	e2 e3       	ldi	r30, 0x32	; 50
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <GPIO_readPort+0x6>
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <GPIO_readPort+0x8>
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ca2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	84 30       	cpi	r24, 0x04	; 4
    1ca8:	90 f5       	brcc	.+100    	; 0x1d0e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	3c 83       	std	Y+4, r19	; 0x04
    1cb2:	2b 83       	std	Y+3, r18	; 0x03
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	91 05       	cpc	r25, r1
    1cbc:	d1 f0       	breq	.+52     	; 0x1cf2 <GPIO_readPort+0x5e>
    1cbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc2:	22 30       	cpi	r18, 0x02	; 2
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	2c f4       	brge	.+10     	; 0x1cd2 <GPIO_readPort+0x3e>
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	61 f0       	breq	.+24     	; 0x1ce8 <GPIO_readPort+0x54>
    1cd0:	1e c0       	rjmp	.+60     	; 0x1d0e <GPIO_readPort+0x7a>
    1cd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd6:	22 30       	cpi	r18, 0x02	; 2
    1cd8:	31 05       	cpc	r19, r1
    1cda:	81 f0       	breq	.+32     	; 0x1cfc <GPIO_readPort+0x68>
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce0:	83 30       	cpi	r24, 0x03	; 3
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	81 f0       	breq	.+32     	; 0x1d06 <GPIO_readPort+0x72>
    1ce6:	13 c0       	rjmp	.+38     	; 0x1d0e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ce8:	e9 e3       	ldi	r30, 0x39	; 57
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	0e c0       	rjmp	.+28     	; 0x1d0e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1cf2:	e6 e3       	ldi	r30, 0x36	; 54
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	09 c0       	rjmp	.+18     	; 0x1d0e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1cfc:	e3 e3       	ldi	r30, 0x33	; 51
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	04 c0       	rjmp	.+8      	; 0x1d0e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1d06:	e0 e3       	ldi	r30, 0x30	; 48
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	60 97       	sbiw	r28, 0x10	; 16
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1d3c:	82 e0       	ldi	r24, 0x02	; 2
    1d3e:	61 e0       	ldi	r22, 0x01	; 1
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1d46:	82 e0       	ldi	r24, 0x02	; 2
    1d48:	62 e0       	ldi	r22, 0x02	; 2
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1d50:	82 e0       	ldi	r24, 0x02	; 2
    1d52:	63 e0       	ldi	r22, 0x03	; 3
    1d54:	40 e0       	ldi	r20, 0x00	; 0
    1d56:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	64 e0       	ldi	r22, 0x04	; 4
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	65 e0       	ldi	r22, 0x05	; 5
    1d68:	40 e0       	ldi	r20, 0x00	; 0
    1d6a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1d6e:	82 e0       	ldi	r24, 0x02	; 2
    1d70:	66 e0       	ldi	r22, 0x06	; 6
    1d72:	40 e0       	ldi	r20, 0x00	; 0
    1d74:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1d78:	82 e0       	ldi	r24, 0x02	; 2
    1d7a:	67 e0       	ldi	r22, 0x07	; 7
    1d7c:	40 e0       	ldi	r20, 0x00	; 0
    1d7e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d82:	1f 86       	std	Y+15, r1	; 0x0f
    1d84:	ab c0       	rjmp	.+342    	; 0x1edc <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1d86:	82 e0       	ldi	r24, 0x02	; 2
    1d88:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d9a:	18 8a       	std	Y+16, r1	; 0x10
    1d9c:	22 c0       	rjmp	.+68     	; 0x1de2 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1d9e:	88 89       	ldd	r24, Y+16	; 0x10
    1da0:	98 2f       	mov	r25, r24
    1da2:	9c 5f       	subi	r25, 0xFC	; 252
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	69 2f       	mov	r22, r25
    1da8:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <GPIO_readPin>
    1dac:	88 23       	and	r24, r24
    1dae:	b1 f4       	brne	.+44     	; 0x1ddc <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1db0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db2:	88 2f       	mov	r24, r24
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	98 2f       	mov	r25, r24
    1dc0:	88 89       	ldd	r24, Y+16	; 0x10
    1dc2:	89 0f       	add	r24, r25
    1dc4:	8f 5f       	subi	r24, 0xFF	; 255
    1dc6:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1dca:	60 96       	adiw	r28, 0x10	; 16
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1ddc:	88 89       	ldd	r24, Y+16	; 0x10
    1dde:	8f 5f       	subi	r24, 0xFF	; 255
    1de0:	88 8b       	std	Y+16, r24	; 0x10
    1de2:	88 89       	ldd	r24, Y+16	; 0x10
    1de4:	84 30       	cpi	r24, 0x04	; 4
    1de6:	d8 f2       	brcs	.-74     	; 0x1d9e <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	a0 ea       	ldi	r26, 0xA0	; 160
    1df8:	b0 e4       	ldi	r27, 0x40	; 64
    1dfa:	8b 87       	std	Y+11, r24	; 0x0b
    1dfc:	9c 87       	std	Y+12, r25	; 0x0c
    1dfe:	ad 87       	std	Y+13, r26	; 0x0d
    1e00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	4a ef       	ldi	r20, 0xFA	; 250
    1e10:	54 e4       	ldi	r21, 0x44	; 68
    1e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	8f 83       	std	Y+7, r24	; 0x07
    1e1c:	98 87       	std	Y+8, r25	; 0x08
    1e1e:	a9 87       	std	Y+9, r26	; 0x09
    1e20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e22:	6f 81       	ldd	r22, Y+7	; 0x07
    1e24:	78 85       	ldd	r23, Y+8	; 0x08
    1e26:	89 85       	ldd	r24, Y+9	; 0x09
    1e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e8       	ldi	r20, 0x80	; 128
    1e30:	5f e3       	ldi	r21, 0x3F	; 63
    1e32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e36:	88 23       	and	r24, r24
    1e38:	2c f4       	brge	.+10     	; 0x1e44 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
    1e42:	3f c0       	rjmp	.+126    	; 0x1ec2 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1e44:	6f 81       	ldd	r22, Y+7	; 0x07
    1e46:	78 85       	ldd	r23, Y+8	; 0x08
    1e48:	89 85       	ldd	r24, Y+9	; 0x09
    1e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	3f ef       	ldi	r19, 0xFF	; 255
    1e50:	4f e7       	ldi	r20, 0x7F	; 127
    1e52:	57 e4       	ldi	r21, 0x47	; 71
    1e54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e58:	18 16       	cp	r1, r24
    1e5a:	4c f5       	brge	.+82     	; 0x1eae <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e2       	ldi	r20, 0x20	; 32
    1e6a:	51 e4       	ldi	r21, 0x41	; 65
    1e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	bc 01       	movw	r22, r24
    1e76:	cd 01       	movw	r24, r26
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	8d 83       	std	Y+5, r24	; 0x05
    1e84:	0f c0       	rjmp	.+30     	; 0x1ea4 <KEYPAD_getPressedKey+0x186>
    1e86:	88 ec       	ldi	r24, 0xC8	; 200
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	9c 83       	std	Y+4, r25	; 0x04
    1e8c:	8b 83       	std	Y+3, r24	; 0x03
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	9c 81       	ldd	r25, Y+4	; 0x04
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <KEYPAD_getPressedKey+0x174>
    1e96:	9c 83       	std	Y+4, r25	; 0x04
    1e98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	9e 83       	std	Y+6, r25	; 0x06
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	69 f7       	brne	.-38     	; 0x1e86 <KEYPAD_getPressedKey+0x168>
    1eac:	14 c0       	rjmp	.+40     	; 0x1ed6 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eae:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb0:	78 85       	ldd	r23, Y+8	; 0x08
    1eb2:	89 85       	ldd	r24, Y+9	; 0x09
    1eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	9e 83       	std	Y+6, r25	; 0x06
    1ec0:	8d 83       	std	Y+5, r24	; 0x05
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <KEYPAD_getPressedKey+0x1b0>
    1ed2:	9a 83       	std	Y+2, r25	; 0x02
    1ed4:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1ed6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ed8:	8f 5f       	subi	r24, 0xFF	; 255
    1eda:	8f 87       	std	Y+15, r24	; 0x0f
    1edc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ede:	84 30       	cpi	r24, 0x04	; 4
    1ee0:	08 f4       	brcc	.+2      	; 0x1ee4 <KEYPAD_getPressedKey+0x1c6>
    1ee2:	51 cf       	rjmp	.-350    	; 0x1d86 <KEYPAD_getPressedKey+0x68>
    1ee4:	4e cf       	rjmp	.-356    	; 0x1d82 <KEYPAD_getPressedKey+0x64>

00001ee6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <KEYPAD_4x4_adjustKeyNumber+0x6>
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <KEYPAD_4x4_adjustKeyNumber+0x8>
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1ef4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	3c 83       	std	Y+4, r19	; 0x04
    1efe:	2b 83       	std	Y+3, r18	; 0x03
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	9c 81       	ldd	r25, Y+4	; 0x04
    1f04:	88 30       	cpi	r24, 0x08	; 8
    1f06:	91 05       	cpc	r25, r1
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <KEYPAD_4x4_adjustKeyNumber+0x26>
    1f0a:	70 c0       	rjmp	.+224    	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x106>
    1f0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f10:	29 30       	cpi	r18, 0x09	; 9
    1f12:	31 05       	cpc	r19, r1
    1f14:	5c f5       	brge	.+86     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x86>
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	84 30       	cpi	r24, 0x04	; 4
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1f20:	59 c0       	rjmp	.+178    	; 0x1fd4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1f22:	2b 81       	ldd	r18, Y+3	; 0x03
    1f24:	3c 81       	ldd	r19, Y+4	; 0x04
    1f26:	25 30       	cpi	r18, 0x05	; 5
    1f28:	31 05       	cpc	r19, r1
    1f2a:	9c f4       	brge	.+38     	; 0x1f52 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	91 05       	cpc	r25, r1
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1f36:	48 c0       	rjmp	.+144    	; 0x1fc8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1f38:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3c:	23 30       	cpi	r18, 0x03	; 3
    1f3e:	31 05       	cpc	r19, r1
    1f40:	0c f0       	brlt	.+2      	; 0x1f44 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1f42:	45 c0       	rjmp	.+138    	; 0x1fce <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1f4e:	39 c0       	rjmp	.+114    	; 0x1fc2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1f50:	67 c0       	rjmp	.+206    	; 0x2020 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1f52:	2b 81       	ldd	r18, Y+3	; 0x03
    1f54:	3c 81       	ldd	r19, Y+4	; 0x04
    1f56:	26 30       	cpi	r18, 0x06	; 6
    1f58:	31 05       	cpc	r19, r1
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <KEYPAD_4x4_adjustKeyNumber+0x78>
    1f5c:	41 c0       	rjmp	.+130    	; 0x1fe0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	9c 81       	ldd	r25, Y+4	; 0x04
    1f62:	87 30       	cpi	r24, 0x07	; 7
    1f64:	91 05       	cpc	r25, r1
    1f66:	0c f0       	brlt	.+2      	; 0x1f6a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1f68:	3e c0       	rjmp	.+124    	; 0x1fe6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1f6a:	37 c0       	rjmp	.+110    	; 0x1fda <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f70:	2c 30       	cpi	r18, 0x0C	; 12
    1f72:	31 05       	cpc	r19, r1
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1f76:	46 c0       	rjmp	.+140    	; 0x2004 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7c:	8d 30       	cpi	r24, 0x0D	; 13
    1f7e:	91 05       	cpc	r25, r1
    1f80:	5c f4       	brge	.+22     	; 0x1f98 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1f82:	2b 81       	ldd	r18, Y+3	; 0x03
    1f84:	3c 81       	ldd	r19, Y+4	; 0x04
    1f86:	2a 30       	cpi	r18, 0x0A	; 10
    1f88:	31 05       	cpc	r19, r1
    1f8a:	b1 f1       	breq	.+108    	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f90:	8b 30       	cpi	r24, 0x0B	; 11
    1f92:	91 05       	cpc	r25, r1
    1f94:	a4 f5       	brge	.+104    	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x118>
    1f96:	2d c0       	rjmp	.+90     	; 0x1ff2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1f98:	2b 81       	ldd	r18, Y+3	; 0x03
    1f9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f9c:	2e 30       	cpi	r18, 0x0E	; 14
    1f9e:	31 05       	cpc	r19, r1
    1fa0:	b9 f1       	breq	.+110    	; 0x2010 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa6:	8e 30       	cpi	r24, 0x0E	; 14
    1fa8:	91 05       	cpc	r25, r1
    1faa:	7c f1       	brlt	.+94     	; 0x200a <KEYPAD_4x4_adjustKeyNumber+0x124>
    1fac:	2b 81       	ldd	r18, Y+3	; 0x03
    1fae:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb0:	2f 30       	cpi	r18, 0x0F	; 15
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	79 f1       	breq	.+94     	; 0x2014 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	80 31       	cpi	r24, 0x10	; 16
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	69 f1       	breq	.+90     	; 0x201a <KEYPAD_4x4_adjustKeyNumber+0x134>
    1fc0:	2f c0       	rjmp	.+94     	; 0x2020 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1fc2:	87 e0       	ldi	r24, 0x07	; 7
    1fc4:	89 83       	std	Y+1, r24	; 0x01
    1fc6:	2e c0       	rjmp	.+92     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1fc8:	88 e0       	ldi	r24, 0x08	; 8
    1fca:	89 83       	std	Y+1, r24	; 0x01
    1fcc:	2b c0       	rjmp	.+86     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1fce:	89 e0       	ldi	r24, 0x09	; 9
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	28 c0       	rjmp	.+80     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1fd4:	85 e2       	ldi	r24, 0x25	; 37
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	25 c0       	rjmp	.+74     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1fda:	84 e0       	ldi	r24, 0x04	; 4
    1fdc:	89 83       	std	Y+1, r24	; 0x01
    1fde:	22 c0       	rjmp	.+68     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1fe0:	85 e0       	ldi	r24, 0x05	; 5
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	1f c0       	rjmp	.+62     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1fe6:	86 e0       	ldi	r24, 0x06	; 6
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	1c c0       	rjmp	.+56     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1fec:	8a e2       	ldi	r24, 0x2A	; 42
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	19 c0       	rjmp	.+50     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	16 c0       	rjmp	.+44     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	13 c0       	rjmp	.+38     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1ffe:	83 e0       	ldi	r24, 0x03	; 3
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	10 c0       	rjmp	.+32     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2004:	8d e2       	ldi	r24, 0x2D	; 45
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	0d c0       	rjmp	.+26     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    200a:	8d e0       	ldi	r24, 0x0D	; 13
    200c:	89 83       	std	Y+1, r24	; 0x01
    200e:	0a c0       	rjmp	.+20     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2010:	19 82       	std	Y+1, r1	; 0x01
    2012:	08 c0       	rjmp	.+16     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2014:	8d e3       	ldi	r24, 0x3D	; 61
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	05 c0       	rjmp	.+10     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    201a:	8b e2       	ldi	r24, 0x2B	; 43
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2024:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	2e 97       	sbiw	r28, 0x0e	; 14
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	61 e0       	ldi	r22, 0x01	; 1
    204c:	41 e0       	ldi	r20, 0x01	; 1
    204e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	41 e0       	ldi	r20, 0x01	; 1
    2058:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a0 ea       	ldi	r26, 0xA0	; 160
    2062:	b1 e4       	ldi	r27, 0x41	; 65
    2064:	8b 87       	std	Y+11, r24	; 0x0b
    2066:	9c 87       	std	Y+12, r25	; 0x0c
    2068:	ad 87       	std	Y+13, r26	; 0x0d
    206a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206c:	6b 85       	ldd	r22, Y+11	; 0x0b
    206e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2070:	8d 85       	ldd	r24, Y+13	; 0x0d
    2072:	9e 85       	ldd	r25, Y+14	; 0x0e
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	4a ef       	ldi	r20, 0xFA	; 250
    207a:	54 e4       	ldi	r21, 0x44	; 68
    207c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	8f 83       	std	Y+7, r24	; 0x07
    2086:	98 87       	std	Y+8, r25	; 0x08
    2088:	a9 87       	std	Y+9, r26	; 0x09
    208a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    208c:	6f 81       	ldd	r22, Y+7	; 0x07
    208e:	78 85       	ldd	r23, Y+8	; 0x08
    2090:	89 85       	ldd	r24, Y+9	; 0x09
    2092:	9a 85       	ldd	r25, Y+10	; 0x0a
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e8       	ldi	r20, 0x80	; 128
    209a:	5f e3       	ldi	r21, 0x3F	; 63
    209c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a0:	88 23       	and	r24, r24
    20a2:	2c f4       	brge	.+10     	; 0x20ae <LCD_init+0x7a>
		__ticks = 1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9e 83       	std	Y+6, r25	; 0x06
    20aa:	8d 83       	std	Y+5, r24	; 0x05
    20ac:	3f c0       	rjmp	.+126    	; 0x212c <LCD_init+0xf8>
	else if (__tmp > 65535)
    20ae:	6f 81       	ldd	r22, Y+7	; 0x07
    20b0:	78 85       	ldd	r23, Y+8	; 0x08
    20b2:	89 85       	ldd	r24, Y+9	; 0x09
    20b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	3f ef       	ldi	r19, 0xFF	; 255
    20ba:	4f e7       	ldi	r20, 0x7F	; 127
    20bc:	57 e4       	ldi	r21, 0x47	; 71
    20be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c2:	18 16       	cp	r1, r24
    20c4:	4c f5       	brge	.+82     	; 0x2118 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    20cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e2       	ldi	r20, 0x20	; 32
    20d4:	51 e4       	ldi	r21, 0x41	; 65
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	9e 83       	std	Y+6, r25	; 0x06
    20ec:	8d 83       	std	Y+5, r24	; 0x05
    20ee:	0f c0       	rjmp	.+30     	; 0x210e <LCD_init+0xda>
    20f0:	88 ec       	ldi	r24, 0xC8	; 200
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	9c 83       	std	Y+4, r25	; 0x04
    20f6:	8b 83       	std	Y+3, r24	; 0x03
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	9c 81       	ldd	r25, Y+4	; 0x04
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <LCD_init+0xc8>
    2100:	9c 83       	std	Y+4, r25	; 0x04
    2102:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210e:	8d 81       	ldd	r24, Y+5	; 0x05
    2110:	9e 81       	ldd	r25, Y+6	; 0x06
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	69 f7       	brne	.-38     	; 0x20f0 <LCD_init+0xbc>
    2116:	14 c0       	rjmp	.+40     	; 0x2140 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2118:	6f 81       	ldd	r22, Y+7	; 0x07
    211a:	78 85       	ldd	r23, Y+8	; 0x08
    211c:	89 85       	ldd	r24, Y+9	; 0x09
    211e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	9a 83       	std	Y+2, r25	; 0x02
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	9a 81       	ldd	r25, Y+2	; 0x02
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <LCD_init+0x104>
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	64 e0       	ldi	r22, 0x04	; 4
    2144:	41 e0       	ldi	r20, 0x01	; 1
    2146:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	65 e0       	ldi	r22, 0x05	; 5
    214e:	41 e0       	ldi	r20, 0x01	; 1
    2150:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	66 e0       	ldi	r22, 0x06	; 6
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	67 e0       	ldi	r22, 0x07	; 7
    2162:	41 e0       	ldi	r20, 0x01	; 1
    2164:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2168:	83 e3       	ldi	r24, 0x33	; 51
    216a:	0e 94 cc 10 	call	0x2198	; 0x2198 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    216e:	82 e3       	ldi	r24, 0x32	; 50
    2170:	0e 94 cc 10 	call	0x2198	; 0x2198 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2174:	88 e2       	ldi	r24, 0x28	; 40
    2176:	0e 94 cc 10 	call	0x2198	; 0x2198 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    217a:	8c e0       	ldi	r24, 0x0C	; 12
    217c:	0e 94 cc 10 	call	0x2198	; 0x2198 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	0e 94 cc 10 	call	0x2198	; 0x2198 <LCD_sendCommand>
}
    2186:	2e 96       	adiw	r28, 0x0e	; 14
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	de bf       	out	0x3e, r29	; 62
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	cd bf       	out	0x3d, r28	; 61
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	c3 56       	subi	r28, 0x63	; 99
    21a6:	d0 40       	sbci	r29, 0x00	; 0
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	fe 01       	movw	r30, r28
    21b4:	ed 59       	subi	r30, 0x9D	; 157
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	61 e0       	ldi	r22, 0x01	; 1
    21be:	40 e0       	ldi	r20, 0x00	; 0
    21c0:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
    21c4:	fe 01       	movw	r30, r28
    21c6:	e1 5a       	subi	r30, 0xA1	; 161
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	a0 e8       	ldi	r26, 0x80	; 128
    21d0:	bf e3       	ldi	r27, 0x3F	; 63
    21d2:	80 83       	st	Z, r24
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	a2 83       	std	Z+2, r26	; 0x02
    21d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21da:	8e 01       	movw	r16, r28
    21dc:	05 5a       	subi	r16, 0xA5	; 165
    21de:	1f 4f       	sbci	r17, 0xFF	; 255
    21e0:	fe 01       	movw	r30, r28
    21e2:	e1 5a       	subi	r30, 0xA1	; 161
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	60 81       	ld	r22, Z
    21e8:	71 81       	ldd	r23, Z+1	; 0x01
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	93 81       	ldd	r25, Z+3	; 0x03
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	4a ef       	ldi	r20, 0xFA	; 250
    21f4:	54 e4       	ldi	r21, 0x44	; 68
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	f8 01       	movw	r30, r16
    2200:	80 83       	st	Z, r24
    2202:	91 83       	std	Z+1, r25	; 0x01
    2204:	a2 83       	std	Z+2, r26	; 0x02
    2206:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2208:	fe 01       	movw	r30, r28
    220a:	e5 5a       	subi	r30, 0xA5	; 165
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	60 81       	ld	r22, Z
    2210:	71 81       	ldd	r23, Z+1	; 0x01
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	93 81       	ldd	r25, Z+3	; 0x03
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e8       	ldi	r20, 0x80	; 128
    221c:	5f e3       	ldi	r21, 0x3F	; 63
    221e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2222:	88 23       	and	r24, r24
    2224:	44 f4       	brge	.+16     	; 0x2236 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2226:	fe 01       	movw	r30, r28
    2228:	e7 5a       	subi	r30, 0xA7	; 167
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	91 83       	std	Z+1, r25	; 0x01
    2232:	80 83       	st	Z, r24
    2234:	64 c0       	rjmp	.+200    	; 0x22fe <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2236:	fe 01       	movw	r30, r28
    2238:	e5 5a       	subi	r30, 0xA5	; 165
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	60 81       	ld	r22, Z
    223e:	71 81       	ldd	r23, Z+1	; 0x01
    2240:	82 81       	ldd	r24, Z+2	; 0x02
    2242:	93 81       	ldd	r25, Z+3	; 0x03
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	3f ef       	ldi	r19, 0xFF	; 255
    2248:	4f e7       	ldi	r20, 0x7F	; 127
    224a:	57 e4       	ldi	r21, 0x47	; 71
    224c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2250:	18 16       	cp	r1, r24
    2252:	0c f0       	brlt	.+2      	; 0x2256 <LCD_sendCommand+0xbe>
    2254:	43 c0       	rjmp	.+134    	; 0x22dc <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2256:	fe 01       	movw	r30, r28
    2258:	e1 5a       	subi	r30, 0xA1	; 161
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	60 81       	ld	r22, Z
    225e:	71 81       	ldd	r23, Z+1	; 0x01
    2260:	82 81       	ldd	r24, Z+2	; 0x02
    2262:	93 81       	ldd	r25, Z+3	; 0x03
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e2       	ldi	r20, 0x20	; 32
    226a:	51 e4       	ldi	r21, 0x41	; 65
    226c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	8e 01       	movw	r16, r28
    2276:	07 5a       	subi	r16, 0xA7	; 167
    2278:	1f 4f       	sbci	r17, 0xFF	; 255
    227a:	bc 01       	movw	r22, r24
    227c:	cd 01       	movw	r24, r26
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	f8 01       	movw	r30, r16
    2288:	91 83       	std	Z+1, r25	; 0x01
    228a:	80 83       	st	Z, r24
    228c:	1f c0       	rjmp	.+62     	; 0x22cc <LCD_sendCommand+0x134>
    228e:	fe 01       	movw	r30, r28
    2290:	e9 5a       	subi	r30, 0xA9	; 169
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	88 ec       	ldi	r24, 0xC8	; 200
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
    229c:	fe 01       	movw	r30, r28
    229e:	e9 5a       	subi	r30, 0xA9	; 169
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	80 81       	ld	r24, Z
    22a4:	91 81       	ldd	r25, Z+1	; 0x01
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <LCD_sendCommand+0x10e>
    22aa:	fe 01       	movw	r30, r28
    22ac:	e9 5a       	subi	r30, 0xA9	; 169
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	91 83       	std	Z+1, r25	; 0x01
    22b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b4:	de 01       	movw	r26, r28
    22b6:	a7 5a       	subi	r26, 0xA7	; 167
    22b8:	bf 4f       	sbci	r27, 0xFF	; 255
    22ba:	fe 01       	movw	r30, r28
    22bc:	e7 5a       	subi	r30, 0xA7	; 167
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	80 81       	ld	r24, Z
    22c2:	91 81       	ldd	r25, Z+1	; 0x01
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	11 96       	adiw	r26, 0x01	; 1
    22c8:	9c 93       	st	X, r25
    22ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22cc:	fe 01       	movw	r30, r28
    22ce:	e7 5a       	subi	r30, 0xA7	; 167
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	80 81       	ld	r24, Z
    22d4:	91 81       	ldd	r25, Z+1	; 0x01
    22d6:	00 97       	sbiw	r24, 0x00	; 0
    22d8:	d1 f6       	brne	.-76     	; 0x228e <LCD_sendCommand+0xf6>
    22da:	27 c0       	rjmp	.+78     	; 0x232a <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22dc:	8e 01       	movw	r16, r28
    22de:	07 5a       	subi	r16, 0xA7	; 167
    22e0:	1f 4f       	sbci	r17, 0xFF	; 255
    22e2:	fe 01       	movw	r30, r28
    22e4:	e5 5a       	subi	r30, 0xA5	; 165
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	f8 01       	movw	r30, r16
    22fa:	91 83       	std	Z+1, r25	; 0x01
    22fc:	80 83       	st	Z, r24
    22fe:	de 01       	movw	r26, r28
    2300:	ab 5a       	subi	r26, 0xAB	; 171
    2302:	bf 4f       	sbci	r27, 0xFF	; 255
    2304:	fe 01       	movw	r30, r28
    2306:	e7 5a       	subi	r30, 0xA7	; 167
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	80 81       	ld	r24, Z
    230c:	91 81       	ldd	r25, Z+1	; 0x01
    230e:	8d 93       	st	X+, r24
    2310:	9c 93       	st	X, r25
    2312:	fe 01       	movw	r30, r28
    2314:	eb 5a       	subi	r30, 0xAB	; 171
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	80 81       	ld	r24, Z
    231a:	91 81       	ldd	r25, Z+1	; 0x01
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <LCD_sendCommand+0x184>
    2320:	fe 01       	movw	r30, r28
    2322:	eb 5a       	subi	r30, 0xAB	; 171
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
    2334:	fe 01       	movw	r30, r28
    2336:	ef 5a       	subi	r30, 0xAF	; 175
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	a0 e8       	ldi	r26, 0x80	; 128
    2340:	bf e3       	ldi	r27, 0x3F	; 63
    2342:	80 83       	st	Z, r24
    2344:	91 83       	std	Z+1, r25	; 0x01
    2346:	a2 83       	std	Z+2, r26	; 0x02
    2348:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234a:	8e 01       	movw	r16, r28
    234c:	03 5b       	subi	r16, 0xB3	; 179
    234e:	1f 4f       	sbci	r17, 0xFF	; 255
    2350:	fe 01       	movw	r30, r28
    2352:	ef 5a       	subi	r30, 0xAF	; 175
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	82 81       	ldd	r24, Z+2	; 0x02
    235c:	93 81       	ldd	r25, Z+3	; 0x03
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	4a ef       	ldi	r20, 0xFA	; 250
    2364:	54 e4       	ldi	r21, 0x44	; 68
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	f8 01       	movw	r30, r16
    2370:	80 83       	st	Z, r24
    2372:	91 83       	std	Z+1, r25	; 0x01
    2374:	a2 83       	std	Z+2, r26	; 0x02
    2376:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2378:	fe 01       	movw	r30, r28
    237a:	e3 5b       	subi	r30, 0xB3	; 179
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	60 81       	ld	r22, Z
    2380:	71 81       	ldd	r23, Z+1	; 0x01
    2382:	82 81       	ldd	r24, Z+2	; 0x02
    2384:	93 81       	ldd	r25, Z+3	; 0x03
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e8       	ldi	r20, 0x80	; 128
    238c:	5f e3       	ldi	r21, 0x3F	; 63
    238e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2392:	88 23       	and	r24, r24
    2394:	44 f4       	brge	.+16     	; 0x23a6 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2396:	fe 01       	movw	r30, r28
    2398:	e5 5b       	subi	r30, 0xB5	; 181
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	91 83       	std	Z+1, r25	; 0x01
    23a2:	80 83       	st	Z, r24
    23a4:	64 c0       	rjmp	.+200    	; 0x246e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    23a6:	fe 01       	movw	r30, r28
    23a8:	e3 5b       	subi	r30, 0xB3	; 179
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	60 81       	ld	r22, Z
    23ae:	71 81       	ldd	r23, Z+1	; 0x01
    23b0:	82 81       	ldd	r24, Z+2	; 0x02
    23b2:	93 81       	ldd	r25, Z+3	; 0x03
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	3f ef       	ldi	r19, 0xFF	; 255
    23b8:	4f e7       	ldi	r20, 0x7F	; 127
    23ba:	57 e4       	ldi	r21, 0x47	; 71
    23bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	0c f0       	brlt	.+2      	; 0x23c6 <LCD_sendCommand+0x22e>
    23c4:	43 c0       	rjmp	.+134    	; 0x244c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c6:	fe 01       	movw	r30, r28
    23c8:	ef 5a       	subi	r30, 0xAF	; 175
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e2       	ldi	r20, 0x20	; 32
    23da:	51 e4       	ldi	r21, 0x41	; 65
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	8e 01       	movw	r16, r28
    23e6:	05 5b       	subi	r16, 0xB5	; 181
    23e8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ea:	bc 01       	movw	r22, r24
    23ec:	cd 01       	movw	r24, r26
    23ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	f8 01       	movw	r30, r16
    23f8:	91 83       	std	Z+1, r25	; 0x01
    23fa:	80 83       	st	Z, r24
    23fc:	1f c0       	rjmp	.+62     	; 0x243c <LCD_sendCommand+0x2a4>
    23fe:	fe 01       	movw	r30, r28
    2400:	e7 5b       	subi	r30, 0xB7	; 183
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	88 ec       	ldi	r24, 0xC8	; 200
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	91 83       	std	Z+1, r25	; 0x01
    240a:	80 83       	st	Z, r24
    240c:	fe 01       	movw	r30, r28
    240e:	e7 5b       	subi	r30, 0xB7	; 183
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	80 81       	ld	r24, Z
    2414:	91 81       	ldd	r25, Z+1	; 0x01
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	f1 f7       	brne	.-4      	; 0x2416 <LCD_sendCommand+0x27e>
    241a:	fe 01       	movw	r30, r28
    241c:	e7 5b       	subi	r30, 0xB7	; 183
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	91 83       	std	Z+1, r25	; 0x01
    2422:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2424:	de 01       	movw	r26, r28
    2426:	a5 5b       	subi	r26, 0xB5	; 181
    2428:	bf 4f       	sbci	r27, 0xFF	; 255
    242a:	fe 01       	movw	r30, r28
    242c:	e5 5b       	subi	r30, 0xB5	; 181
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	80 81       	ld	r24, Z
    2432:	91 81       	ldd	r25, Z+1	; 0x01
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	11 96       	adiw	r26, 0x01	; 1
    2438:	9c 93       	st	X, r25
    243a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243c:	fe 01       	movw	r30, r28
    243e:	e5 5b       	subi	r30, 0xB5	; 181
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 81       	ld	r24, Z
    2444:	91 81       	ldd	r25, Z+1	; 0x01
    2446:	00 97       	sbiw	r24, 0x00	; 0
    2448:	d1 f6       	brne	.-76     	; 0x23fe <LCD_sendCommand+0x266>
    244a:	27 c0       	rjmp	.+78     	; 0x249a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244c:	8e 01       	movw	r16, r28
    244e:	05 5b       	subi	r16, 0xB5	; 181
    2450:	1f 4f       	sbci	r17, 0xFF	; 255
    2452:	fe 01       	movw	r30, r28
    2454:	e3 5b       	subi	r30, 0xB3	; 179
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	60 81       	ld	r22, Z
    245a:	71 81       	ldd	r23, Z+1	; 0x01
    245c:	82 81       	ldd	r24, Z+2	; 0x02
    245e:	93 81       	ldd	r25, Z+3	; 0x03
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	f8 01       	movw	r30, r16
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	80 83       	st	Z, r24
    246e:	de 01       	movw	r26, r28
    2470:	a9 5b       	subi	r26, 0xB9	; 185
    2472:	bf 4f       	sbci	r27, 0xFF	; 255
    2474:	fe 01       	movw	r30, r28
    2476:	e5 5b       	subi	r30, 0xB5	; 181
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	80 81       	ld	r24, Z
    247c:	91 81       	ldd	r25, Z+1	; 0x01
    247e:	8d 93       	st	X+, r24
    2480:	9c 93       	st	X, r25
    2482:	fe 01       	movw	r30, r28
    2484:	e9 5b       	subi	r30, 0xB9	; 185
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	80 81       	ld	r24, Z
    248a:	91 81       	ldd	r25, Z+1	; 0x01
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <LCD_sendCommand+0x2f4>
    2490:	fe 01       	movw	r30, r28
    2492:	e9 5b       	subi	r30, 0xB9	; 185
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	91 83       	std	Z+1, r25	; 0x01
    2498:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    249a:	fe 01       	movw	r30, r28
    249c:	ed 59       	subi	r30, 0x9D	; 157
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 81       	ld	r24, Z
    24a2:	88 2f       	mov	r24, r24
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	80 71       	andi	r24, 0x10	; 16
    24a8:	90 70       	andi	r25, 0x00	; 0
    24aa:	95 95       	asr	r25
    24ac:	87 95       	ror	r24
    24ae:	95 95       	asr	r25
    24b0:	87 95       	ror	r24
    24b2:	95 95       	asr	r25
    24b4:	87 95       	ror	r24
    24b6:	95 95       	asr	r25
    24b8:	87 95       	ror	r24
    24ba:	98 2f       	mov	r25, r24
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	64 e0       	ldi	r22, 0x04	; 4
    24c0:	49 2f       	mov	r20, r25
    24c2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    24c6:	fe 01       	movw	r30, r28
    24c8:	ed 59       	subi	r30, 0x9D	; 157
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 81       	ld	r24, Z
    24ce:	88 2f       	mov	r24, r24
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	80 72       	andi	r24, 0x20	; 32
    24d4:	90 70       	andi	r25, 0x00	; 0
    24d6:	95 95       	asr	r25
    24d8:	87 95       	ror	r24
    24da:	95 95       	asr	r25
    24dc:	87 95       	ror	r24
    24de:	95 95       	asr	r25
    24e0:	87 95       	ror	r24
    24e2:	95 95       	asr	r25
    24e4:	87 95       	ror	r24
    24e6:	95 95       	asr	r25
    24e8:	87 95       	ror	r24
    24ea:	98 2f       	mov	r25, r24
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	65 e0       	ldi	r22, 0x05	; 5
    24f0:	49 2f       	mov	r20, r25
    24f2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    24f6:	fe 01       	movw	r30, r28
    24f8:	ed 59       	subi	r30, 0x9D	; 157
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	88 2f       	mov	r24, r24
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	80 74       	andi	r24, 0x40	; 64
    2504:	90 70       	andi	r25, 0x00	; 0
    2506:	08 2e       	mov	r0, r24
    2508:	89 2f       	mov	r24, r25
    250a:	00 0c       	add	r0, r0
    250c:	88 1f       	adc	r24, r24
    250e:	99 0b       	sbc	r25, r25
    2510:	00 0c       	add	r0, r0
    2512:	88 1f       	adc	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	98 2f       	mov	r25, r24
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	66 e0       	ldi	r22, 0x06	; 6
    251c:	49 2f       	mov	r20, r25
    251e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2522:	fe 01       	movw	r30, r28
    2524:	ed 59       	subi	r30, 0x9D	; 157
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	80 81       	ld	r24, Z
    252a:	98 2f       	mov	r25, r24
    252c:	99 1f       	adc	r25, r25
    252e:	99 27       	eor	r25, r25
    2530:	99 1f       	adc	r25, r25
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	67 e0       	ldi	r22, 0x07	; 7
    2536:	49 2f       	mov	r20, r25
    2538:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
    253c:	fe 01       	movw	r30, r28
    253e:	ed 5b       	subi	r30, 0xBD	; 189
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	a0 e8       	ldi	r26, 0x80	; 128
    2548:	bf e3       	ldi	r27, 0x3F	; 63
    254a:	80 83       	st	Z, r24
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	a2 83       	std	Z+2, r26	; 0x02
    2550:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2552:	8e 01       	movw	r16, r28
    2554:	01 5c       	subi	r16, 0xC1	; 193
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	fe 01       	movw	r30, r28
    255a:	ed 5b       	subi	r30, 0xBD	; 189
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	4a ef       	ldi	r20, 0xFA	; 250
    256c:	54 e4       	ldi	r21, 0x44	; 68
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	f8 01       	movw	r30, r16
    2578:	80 83       	st	Z, r24
    257a:	91 83       	std	Z+1, r25	; 0x01
    257c:	a2 83       	std	Z+2, r26	; 0x02
    257e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2580:	fe 01       	movw	r30, r28
    2582:	ff 96       	adiw	r30, 0x3f	; 63
    2584:	60 81       	ld	r22, Z
    2586:	71 81       	ldd	r23, Z+1	; 0x01
    2588:	82 81       	ldd	r24, Z+2	; 0x02
    258a:	93 81       	ldd	r25, Z+3	; 0x03
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e8       	ldi	r20, 0x80	; 128
    2592:	5f e3       	ldi	r21, 0x3F	; 63
    2594:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2598:	88 23       	and	r24, r24
    259a:	2c f4       	brge	.+10     	; 0x25a6 <LCD_sendCommand+0x40e>
		__ticks = 1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	9e af       	std	Y+62, r25	; 0x3e
    25a2:	8d af       	std	Y+61, r24	; 0x3d
    25a4:	46 c0       	rjmp	.+140    	; 0x2632 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    25a6:	fe 01       	movw	r30, r28
    25a8:	ff 96       	adiw	r30, 0x3f	; 63
    25aa:	60 81       	ld	r22, Z
    25ac:	71 81       	ldd	r23, Z+1	; 0x01
    25ae:	82 81       	ldd	r24, Z+2	; 0x02
    25b0:	93 81       	ldd	r25, Z+3	; 0x03
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	3f ef       	ldi	r19, 0xFF	; 255
    25b6:	4f e7       	ldi	r20, 0x7F	; 127
    25b8:	57 e4       	ldi	r21, 0x47	; 71
    25ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25be:	18 16       	cp	r1, r24
    25c0:	64 f5       	brge	.+88     	; 0x261a <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c2:	fe 01       	movw	r30, r28
    25c4:	ed 5b       	subi	r30, 0xBD	; 189
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	60 81       	ld	r22, Z
    25ca:	71 81       	ldd	r23, Z+1	; 0x01
    25cc:	82 81       	ldd	r24, Z+2	; 0x02
    25ce:	93 81       	ldd	r25, Z+3	; 0x03
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e2       	ldi	r20, 0x20	; 32
    25d6:	51 e4       	ldi	r21, 0x41	; 65
    25d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9e af       	std	Y+62, r25	; 0x3e
    25ee:	8d af       	std	Y+61, r24	; 0x3d
    25f0:	0f c0       	rjmp	.+30     	; 0x2610 <LCD_sendCommand+0x478>
    25f2:	88 ec       	ldi	r24, 0xC8	; 200
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	9c af       	std	Y+60, r25	; 0x3c
    25f8:	8b af       	std	Y+59, r24	; 0x3b
    25fa:	8b ad       	ldd	r24, Y+59	; 0x3b
    25fc:	9c ad       	ldd	r25, Y+60	; 0x3c
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <LCD_sendCommand+0x466>
    2602:	9c af       	std	Y+60, r25	; 0x3c
    2604:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2606:	8d ad       	ldd	r24, Y+61	; 0x3d
    2608:	9e ad       	ldd	r25, Y+62	; 0x3e
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	9e af       	std	Y+62, r25	; 0x3e
    260e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2610:	8d ad       	ldd	r24, Y+61	; 0x3d
    2612:	9e ad       	ldd	r25, Y+62	; 0x3e
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	69 f7       	brne	.-38     	; 0x25f2 <LCD_sendCommand+0x45a>
    2618:	16 c0       	rjmp	.+44     	; 0x2646 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261a:	fe 01       	movw	r30, r28
    261c:	ff 96       	adiw	r30, 0x3f	; 63
    261e:	60 81       	ld	r22, Z
    2620:	71 81       	ldd	r23, Z+1	; 0x01
    2622:	82 81       	ldd	r24, Z+2	; 0x02
    2624:	93 81       	ldd	r25, Z+3	; 0x03
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9e af       	std	Y+62, r25	; 0x3e
    2630:	8d af       	std	Y+61, r24	; 0x3d
    2632:	8d ad       	ldd	r24, Y+61	; 0x3d
    2634:	9e ad       	ldd	r25, Y+62	; 0x3e
    2636:	9a af       	std	Y+58, r25	; 0x3a
    2638:	89 af       	std	Y+57, r24	; 0x39
    263a:	89 ad       	ldd	r24, Y+57	; 0x39
    263c:	9a ad       	ldd	r25, Y+58	; 0x3a
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <LCD_sendCommand+0x4a6>
    2642:	9a af       	std	Y+58, r25	; 0x3a
    2644:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	60 e0       	ldi	r22, 0x00	; 0
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	a0 e8       	ldi	r26, 0x80	; 128
    2656:	bf e3       	ldi	r27, 0x3F	; 63
    2658:	8d ab       	std	Y+53, r24	; 0x35
    265a:	9e ab       	std	Y+54, r25	; 0x36
    265c:	af ab       	std	Y+55, r26	; 0x37
    265e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2660:	6d a9       	ldd	r22, Y+53	; 0x35
    2662:	7e a9       	ldd	r23, Y+54	; 0x36
    2664:	8f a9       	ldd	r24, Y+55	; 0x37
    2666:	98 ad       	ldd	r25, Y+56	; 0x38
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4a ef       	ldi	r20, 0xFA	; 250
    266e:	54 e4       	ldi	r21, 0x44	; 68
    2670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	89 ab       	std	Y+49, r24	; 0x31
    267a:	9a ab       	std	Y+50, r25	; 0x32
    267c:	ab ab       	std	Y+51, r26	; 0x33
    267e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2680:	69 a9       	ldd	r22, Y+49	; 0x31
    2682:	7a a9       	ldd	r23, Y+50	; 0x32
    2684:	8b a9       	ldd	r24, Y+51	; 0x33
    2686:	9c a9       	ldd	r25, Y+52	; 0x34
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2694:	88 23       	and	r24, r24
    2696:	2c f4       	brge	.+10     	; 0x26a2 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	98 ab       	std	Y+48, r25	; 0x30
    269e:	8f a7       	std	Y+47, r24	; 0x2f
    26a0:	3f c0       	rjmp	.+126    	; 0x2720 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    26a2:	69 a9       	ldd	r22, Y+49	; 0x31
    26a4:	7a a9       	ldd	r23, Y+50	; 0x32
    26a6:	8b a9       	ldd	r24, Y+51	; 0x33
    26a8:	9c a9       	ldd	r25, Y+52	; 0x34
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	3f ef       	ldi	r19, 0xFF	; 255
    26ae:	4f e7       	ldi	r20, 0x7F	; 127
    26b0:	57 e4       	ldi	r21, 0x47	; 71
    26b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b6:	18 16       	cp	r1, r24
    26b8:	4c f5       	brge	.+82     	; 0x270c <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ba:	6d a9       	ldd	r22, Y+53	; 0x35
    26bc:	7e a9       	ldd	r23, Y+54	; 0x36
    26be:	8f a9       	ldd	r24, Y+55	; 0x37
    26c0:	98 ad       	ldd	r25, Y+56	; 0x38
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e2       	ldi	r20, 0x20	; 32
    26c8:	51 e4       	ldi	r21, 0x41	; 65
    26ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	98 ab       	std	Y+48, r25	; 0x30
    26e0:	8f a7       	std	Y+47, r24	; 0x2f
    26e2:	0f c0       	rjmp	.+30     	; 0x2702 <LCD_sendCommand+0x56a>
    26e4:	88 ec       	ldi	r24, 0xC8	; 200
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	9e a7       	std	Y+46, r25	; 0x2e
    26ea:	8d a7       	std	Y+45, r24	; 0x2d
    26ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    26ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <LCD_sendCommand+0x558>
    26f4:	9e a7       	std	Y+46, r25	; 0x2e
    26f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26fa:	98 a9       	ldd	r25, Y+48	; 0x30
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	98 ab       	std	Y+48, r25	; 0x30
    2700:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2702:	8f a5       	ldd	r24, Y+47	; 0x2f
    2704:	98 a9       	ldd	r25, Y+48	; 0x30
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	69 f7       	brne	.-38     	; 0x26e4 <LCD_sendCommand+0x54c>
    270a:	14 c0       	rjmp	.+40     	; 0x2734 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270c:	69 a9       	ldd	r22, Y+49	; 0x31
    270e:	7a a9       	ldd	r23, Y+50	; 0x32
    2710:	8b a9       	ldd	r24, Y+51	; 0x33
    2712:	9c a9       	ldd	r25, Y+52	; 0x34
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	98 ab       	std	Y+48, r25	; 0x30
    271e:	8f a7       	std	Y+47, r24	; 0x2f
    2720:	8f a5       	ldd	r24, Y+47	; 0x2f
    2722:	98 a9       	ldd	r25, Y+48	; 0x30
    2724:	9c a7       	std	Y+44, r25	; 0x2c
    2726:	8b a7       	std	Y+43, r24	; 0x2b
    2728:	8b a5       	ldd	r24, Y+43	; 0x2b
    272a:	9c a5       	ldd	r25, Y+44	; 0x2c
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <LCD_sendCommand+0x594>
    2730:	9c a7       	std	Y+44, r25	; 0x2c
    2732:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	60 e0       	ldi	r22, 0x00	; 0
    2738:	41 e0       	ldi	r20, 0x01	; 1
    273a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	a0 e8       	ldi	r26, 0x80	; 128
    2744:	bf e3       	ldi	r27, 0x3F	; 63
    2746:	8f a3       	std	Y+39, r24	; 0x27
    2748:	98 a7       	std	Y+40, r25	; 0x28
    274a:	a9 a7       	std	Y+41, r26	; 0x29
    274c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274e:	6f a1       	ldd	r22, Y+39	; 0x27
    2750:	78 a5       	ldd	r23, Y+40	; 0x28
    2752:	89 a5       	ldd	r24, Y+41	; 0x29
    2754:	9a a5       	ldd	r25, Y+42	; 0x2a
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	4a ef       	ldi	r20, 0xFA	; 250
    275c:	54 e4       	ldi	r21, 0x44	; 68
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	8b a3       	std	Y+35, r24	; 0x23
    2768:	9c a3       	std	Y+36, r25	; 0x24
    276a:	ad a3       	std	Y+37, r26	; 0x25
    276c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    276e:	6b a1       	ldd	r22, Y+35	; 0x23
    2770:	7c a1       	ldd	r23, Y+36	; 0x24
    2772:	8d a1       	ldd	r24, Y+37	; 0x25
    2774:	9e a1       	ldd	r25, Y+38	; 0x26
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e8       	ldi	r20, 0x80	; 128
    277c:	5f e3       	ldi	r21, 0x3F	; 63
    277e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2782:	88 23       	and	r24, r24
    2784:	2c f4       	brge	.+10     	; 0x2790 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	9a a3       	std	Y+34, r25	; 0x22
    278c:	89 a3       	std	Y+33, r24	; 0x21
    278e:	3f c0       	rjmp	.+126    	; 0x280e <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2790:	6b a1       	ldd	r22, Y+35	; 0x23
    2792:	7c a1       	ldd	r23, Y+36	; 0x24
    2794:	8d a1       	ldd	r24, Y+37	; 0x25
    2796:	9e a1       	ldd	r25, Y+38	; 0x26
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	3f ef       	ldi	r19, 0xFF	; 255
    279c:	4f e7       	ldi	r20, 0x7F	; 127
    279e:	57 e4       	ldi	r21, 0x47	; 71
    27a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a4:	18 16       	cp	r1, r24
    27a6:	4c f5       	brge	.+82     	; 0x27fa <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a8:	6f a1       	ldd	r22, Y+39	; 0x27
    27aa:	78 a5       	ldd	r23, Y+40	; 0x28
    27ac:	89 a5       	ldd	r24, Y+41	; 0x29
    27ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e2       	ldi	r20, 0x20	; 32
    27b6:	51 e4       	ldi	r21, 0x41	; 65
    27b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	bc 01       	movw	r22, r24
    27c2:	cd 01       	movw	r24, r26
    27c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	9a a3       	std	Y+34, r25	; 0x22
    27ce:	89 a3       	std	Y+33, r24	; 0x21
    27d0:	0f c0       	rjmp	.+30     	; 0x27f0 <LCD_sendCommand+0x658>
    27d2:	88 ec       	ldi	r24, 0xC8	; 200
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	98 a3       	std	Y+32, r25	; 0x20
    27d8:	8f 8f       	std	Y+31, r24	; 0x1f
    27da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27dc:	98 a1       	ldd	r25, Y+32	; 0x20
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <LCD_sendCommand+0x646>
    27e2:	98 a3       	std	Y+32, r25	; 0x20
    27e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e6:	89 a1       	ldd	r24, Y+33	; 0x21
    27e8:	9a a1       	ldd	r25, Y+34	; 0x22
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	9a a3       	std	Y+34, r25	; 0x22
    27ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f0:	89 a1       	ldd	r24, Y+33	; 0x21
    27f2:	9a a1       	ldd	r25, Y+34	; 0x22
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	69 f7       	brne	.-38     	; 0x27d2 <LCD_sendCommand+0x63a>
    27f8:	14 c0       	rjmp	.+40     	; 0x2822 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fa:	6b a1       	ldd	r22, Y+35	; 0x23
    27fc:	7c a1       	ldd	r23, Y+36	; 0x24
    27fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2800:	9e a1       	ldd	r25, Y+38	; 0x26
    2802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	9a a3       	std	Y+34, r25	; 0x22
    280c:	89 a3       	std	Y+33, r24	; 0x21
    280e:	89 a1       	ldd	r24, Y+33	; 0x21
    2810:	9a a1       	ldd	r25, Y+34	; 0x22
    2812:	9e 8f       	std	Y+30, r25	; 0x1e
    2814:	8d 8f       	std	Y+29, r24	; 0x1d
    2816:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2818:	9e 8d       	ldd	r25, Y+30	; 0x1e
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <LCD_sendCommand+0x682>
    281e:	9e 8f       	std	Y+30, r25	; 0x1e
    2820:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2822:	fe 01       	movw	r30, r28
    2824:	ed 59       	subi	r30, 0x9D	; 157
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 81       	ld	r24, Z
    282a:	98 2f       	mov	r25, r24
    282c:	91 70       	andi	r25, 0x01	; 1
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	64 e0       	ldi	r22, 0x04	; 4
    2832:	49 2f       	mov	r20, r25
    2834:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2838:	fe 01       	movw	r30, r28
    283a:	ed 59       	subi	r30, 0x9D	; 157
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 81       	ld	r24, Z
    2840:	88 2f       	mov	r24, r24
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	82 70       	andi	r24, 0x02	; 2
    2846:	90 70       	andi	r25, 0x00	; 0
    2848:	95 95       	asr	r25
    284a:	87 95       	ror	r24
    284c:	98 2f       	mov	r25, r24
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	65 e0       	ldi	r22, 0x05	; 5
    2852:	49 2f       	mov	r20, r25
    2854:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2858:	fe 01       	movw	r30, r28
    285a:	ed 59       	subi	r30, 0x9D	; 157
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	80 81       	ld	r24, Z
    2860:	88 2f       	mov	r24, r24
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	84 70       	andi	r24, 0x04	; 4
    2866:	90 70       	andi	r25, 0x00	; 0
    2868:	95 95       	asr	r25
    286a:	87 95       	ror	r24
    286c:	95 95       	asr	r25
    286e:	87 95       	ror	r24
    2870:	98 2f       	mov	r25, r24
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	66 e0       	ldi	r22, 0x06	; 6
    2876:	49 2f       	mov	r20, r25
    2878:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    287c:	fe 01       	movw	r30, r28
    287e:	ed 59       	subi	r30, 0x9D	; 157
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 81       	ld	r24, Z
    2884:	88 2f       	mov	r24, r24
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	88 70       	andi	r24, 0x08	; 8
    288a:	90 70       	andi	r25, 0x00	; 0
    288c:	95 95       	asr	r25
    288e:	87 95       	ror	r24
    2890:	95 95       	asr	r25
    2892:	87 95       	ror	r24
    2894:	95 95       	asr	r25
    2896:	87 95       	ror	r24
    2898:	98 2f       	mov	r25, r24
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	67 e0       	ldi	r22, 0x07	; 7
    289e:	49 2f       	mov	r20, r25
    28a0:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	a0 e8       	ldi	r26, 0x80	; 128
    28aa:	bf e3       	ldi	r27, 0x3F	; 63
    28ac:	89 8f       	std	Y+25, r24	; 0x19
    28ae:	9a 8f       	std	Y+26, r25	; 0x1a
    28b0:	ab 8f       	std	Y+27, r26	; 0x1b
    28b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b4:	69 8d       	ldd	r22, Y+25	; 0x19
    28b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	4a ef       	ldi	r20, 0xFA	; 250
    28c2:	54 e4       	ldi	r21, 0x44	; 68
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	8d 8b       	std	Y+21, r24	; 0x15
    28ce:	9e 8b       	std	Y+22, r25	; 0x16
    28d0:	af 8b       	std	Y+23, r26	; 0x17
    28d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28d4:	6d 89       	ldd	r22, Y+21	; 0x15
    28d6:	7e 89       	ldd	r23, Y+22	; 0x16
    28d8:	8f 89       	ldd	r24, Y+23	; 0x17
    28da:	98 8d       	ldd	r25, Y+24	; 0x18
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e8       	ldi	r20, 0x80	; 128
    28e2:	5f e3       	ldi	r21, 0x3F	; 63
    28e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28e8:	88 23       	and	r24, r24
    28ea:	2c f4       	brge	.+10     	; 0x28f6 <LCD_sendCommand+0x75e>
		__ticks = 1;
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	9c 8b       	std	Y+20, r25	; 0x14
    28f2:	8b 8b       	std	Y+19, r24	; 0x13
    28f4:	3f c0       	rjmp	.+126    	; 0x2974 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    28f6:	6d 89       	ldd	r22, Y+21	; 0x15
    28f8:	7e 89       	ldd	r23, Y+22	; 0x16
    28fa:	8f 89       	ldd	r24, Y+23	; 0x17
    28fc:	98 8d       	ldd	r25, Y+24	; 0x18
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	3f ef       	ldi	r19, 0xFF	; 255
    2902:	4f e7       	ldi	r20, 0x7F	; 127
    2904:	57 e4       	ldi	r21, 0x47	; 71
    2906:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    290a:	18 16       	cp	r1, r24
    290c:	4c f5       	brge	.+82     	; 0x2960 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290e:	69 8d       	ldd	r22, Y+25	; 0x19
    2910:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2912:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2914:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e2       	ldi	r20, 0x20	; 32
    291c:	51 e4       	ldi	r21, 0x41	; 65
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	bc 01       	movw	r22, r24
    2928:	cd 01       	movw	r24, r26
    292a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	9c 8b       	std	Y+20, r25	; 0x14
    2934:	8b 8b       	std	Y+19, r24	; 0x13
    2936:	0f c0       	rjmp	.+30     	; 0x2956 <LCD_sendCommand+0x7be>
    2938:	88 ec       	ldi	r24, 0xC8	; 200
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	9a 8b       	std	Y+18, r25	; 0x12
    293e:	89 8b       	std	Y+17, r24	; 0x11
    2940:	89 89       	ldd	r24, Y+17	; 0x11
    2942:	9a 89       	ldd	r25, Y+18	; 0x12
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	f1 f7       	brne	.-4      	; 0x2944 <LCD_sendCommand+0x7ac>
    2948:	9a 8b       	std	Y+18, r25	; 0x12
    294a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294c:	8b 89       	ldd	r24, Y+19	; 0x13
    294e:	9c 89       	ldd	r25, Y+20	; 0x14
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	9c 8b       	std	Y+20, r25	; 0x14
    2954:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2956:	8b 89       	ldd	r24, Y+19	; 0x13
    2958:	9c 89       	ldd	r25, Y+20	; 0x14
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	69 f7       	brne	.-38     	; 0x2938 <LCD_sendCommand+0x7a0>
    295e:	14 c0       	rjmp	.+40     	; 0x2988 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2960:	6d 89       	ldd	r22, Y+21	; 0x15
    2962:	7e 89       	ldd	r23, Y+22	; 0x16
    2964:	8f 89       	ldd	r24, Y+23	; 0x17
    2966:	98 8d       	ldd	r25, Y+24	; 0x18
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	9c 8b       	std	Y+20, r25	; 0x14
    2972:	8b 8b       	std	Y+19, r24	; 0x13
    2974:	8b 89       	ldd	r24, Y+19	; 0x13
    2976:	9c 89       	ldd	r25, Y+20	; 0x14
    2978:	98 8b       	std	Y+16, r25	; 0x10
    297a:	8f 87       	std	Y+15, r24	; 0x0f
    297c:	8f 85       	ldd	r24, Y+15	; 0x0f
    297e:	98 89       	ldd	r25, Y+16	; 0x10
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <LCD_sendCommand+0x7e8>
    2984:	98 8b       	std	Y+16, r25	; 0x10
    2986:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	60 e0       	ldi	r22, 0x00	; 0
    298c:	40 e0       	ldi	r20, 0x00	; 0
    298e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	a0 e8       	ldi	r26, 0x80	; 128
    2998:	bf e3       	ldi	r27, 0x3F	; 63
    299a:	8b 87       	std	Y+11, r24	; 0x0b
    299c:	9c 87       	std	Y+12, r25	; 0x0c
    299e:	ad 87       	std	Y+13, r26	; 0x0d
    29a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	4a ef       	ldi	r20, 0xFA	; 250
    29b0:	54 e4       	ldi	r21, 0x44	; 68
    29b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	8f 83       	std	Y+7, r24	; 0x07
    29bc:	98 87       	std	Y+8, r25	; 0x08
    29be:	a9 87       	std	Y+9, r26	; 0x09
    29c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29c2:	6f 81       	ldd	r22, Y+7	; 0x07
    29c4:	78 85       	ldd	r23, Y+8	; 0x08
    29c6:	89 85       	ldd	r24, Y+9	; 0x09
    29c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e8       	ldi	r20, 0x80	; 128
    29d0:	5f e3       	ldi	r21, 0x3F	; 63
    29d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d6:	88 23       	and	r24, r24
    29d8:	2c f4       	brge	.+10     	; 0x29e4 <LCD_sendCommand+0x84c>
		__ticks = 1;
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	9e 83       	std	Y+6, r25	; 0x06
    29e0:	8d 83       	std	Y+5, r24	; 0x05
    29e2:	3f c0       	rjmp	.+126    	; 0x2a62 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    29e4:	6f 81       	ldd	r22, Y+7	; 0x07
    29e6:	78 85       	ldd	r23, Y+8	; 0x08
    29e8:	89 85       	ldd	r24, Y+9	; 0x09
    29ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	3f ef       	ldi	r19, 0xFF	; 255
    29f0:	4f e7       	ldi	r20, 0x7F	; 127
    29f2:	57 e4       	ldi	r21, 0x47	; 71
    29f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f8:	18 16       	cp	r1, r24
    29fa:	4c f5       	brge	.+82     	; 0x2a4e <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e2       	ldi	r20, 0x20	; 32
    2a0a:	51 e4       	ldi	r21, 0x41	; 65
    2a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	bc 01       	movw	r22, r24
    2a16:	cd 01       	movw	r24, r26
    2a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	9e 83       	std	Y+6, r25	; 0x06
    2a22:	8d 83       	std	Y+5, r24	; 0x05
    2a24:	0f c0       	rjmp	.+30     	; 0x2a44 <LCD_sendCommand+0x8ac>
    2a26:	88 ec       	ldi	r24, 0xC8	; 200
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	9c 83       	std	Y+4, r25	; 0x04
    2a2c:	8b 83       	std	Y+3, r24	; 0x03
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	9c 81       	ldd	r25, Y+4	; 0x04
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	f1 f7       	brne	.-4      	; 0x2a32 <LCD_sendCommand+0x89a>
    2a36:	9c 83       	std	Y+4, r25	; 0x04
    2a38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	9e 83       	std	Y+6, r25	; 0x06
    2a42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a44:	8d 81       	ldd	r24, Y+5	; 0x05
    2a46:	9e 81       	ldd	r25, Y+6	; 0x06
    2a48:	00 97       	sbiw	r24, 0x00	; 0
    2a4a:	69 f7       	brne	.-38     	; 0x2a26 <LCD_sendCommand+0x88e>
    2a4c:	14 c0       	rjmp	.+40     	; 0x2a76 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a50:	78 85       	ldd	r23, Y+8	; 0x08
    2a52:	89 85       	ldd	r24, Y+9	; 0x09
    2a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	9e 83       	std	Y+6, r25	; 0x06
    2a60:	8d 83       	std	Y+5, r24	; 0x05
    2a62:	8d 81       	ldd	r24, Y+5	; 0x05
    2a64:	9e 81       	ldd	r25, Y+6	; 0x06
    2a66:	9a 83       	std	Y+2, r25	; 0x02
    2a68:	89 83       	std	Y+1, r24	; 0x01
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <LCD_sendCommand+0x8d6>
    2a72:	9a 83       	std	Y+2, r25	; 0x02
    2a74:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a76:	cd 59       	subi	r28, 0x9D	; 157
    2a78:	df 4f       	sbci	r29, 0xFF	; 255
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	f8 94       	cli
    2a7e:	de bf       	out	0x3e, r29	; 62
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	cd bf       	out	0x3d, r28	; 61
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	08 95       	ret

00002a8e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	c3 56       	subi	r28, 0x63	; 99
    2a9c:	d0 40       	sbci	r29, 0x00	; 0
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	ed 59       	subi	r30, 0x9D	; 157
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	61 e0       	ldi	r22, 0x01	; 1
    2ab4:	41 e0       	ldi	r20, 0x01	; 1
    2ab6:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
    2aba:	fe 01       	movw	r30, r28
    2abc:	e1 5a       	subi	r30, 0xA1	; 161
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	a0 e8       	ldi	r26, 0x80	; 128
    2ac6:	bf e3       	ldi	r27, 0x3F	; 63
    2ac8:	80 83       	st	Z, r24
    2aca:	91 83       	std	Z+1, r25	; 0x01
    2acc:	a2 83       	std	Z+2, r26	; 0x02
    2ace:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad0:	8e 01       	movw	r16, r28
    2ad2:	05 5a       	subi	r16, 0xA5	; 165
    2ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e1 5a       	subi	r30, 0xA1	; 161
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	60 81       	ld	r22, Z
    2ade:	71 81       	ldd	r23, Z+1	; 0x01
    2ae0:	82 81       	ldd	r24, Z+2	; 0x02
    2ae2:	93 81       	ldd	r25, Z+3	; 0x03
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	4a ef       	ldi	r20, 0xFA	; 250
    2aea:	54 e4       	ldi	r21, 0x44	; 68
    2aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	f8 01       	movw	r30, r16
    2af6:	80 83       	st	Z, r24
    2af8:	91 83       	std	Z+1, r25	; 0x01
    2afa:	a2 83       	std	Z+2, r26	; 0x02
    2afc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2afe:	fe 01       	movw	r30, r28
    2b00:	e5 5a       	subi	r30, 0xA5	; 165
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	60 81       	ld	r22, Z
    2b06:	71 81       	ldd	r23, Z+1	; 0x01
    2b08:	82 81       	ldd	r24, Z+2	; 0x02
    2b0a:	93 81       	ldd	r25, Z+3	; 0x03
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	40 e8       	ldi	r20, 0x80	; 128
    2b12:	5f e3       	ldi	r21, 0x3F	; 63
    2b14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b18:	88 23       	and	r24, r24
    2b1a:	44 f4       	brge	.+16     	; 0x2b2c <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	e7 5a       	subi	r30, 0xA7	; 167
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	91 83       	std	Z+1, r25	; 0x01
    2b28:	80 83       	st	Z, r24
    2b2a:	64 c0       	rjmp	.+200    	; 0x2bf4 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	e5 5a       	subi	r30, 0xA5	; 165
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	60 81       	ld	r22, Z
    2b34:	71 81       	ldd	r23, Z+1	; 0x01
    2b36:	82 81       	ldd	r24, Z+2	; 0x02
    2b38:	93 81       	ldd	r25, Z+3	; 0x03
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	3f ef       	ldi	r19, 0xFF	; 255
    2b3e:	4f e7       	ldi	r20, 0x7F	; 127
    2b40:	57 e4       	ldi	r21, 0x47	; 71
    2b42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b46:	18 16       	cp	r1, r24
    2b48:	0c f0       	brlt	.+2      	; 0x2b4c <LCD_displayCharacter+0xbe>
    2b4a:	43 c0       	rjmp	.+134    	; 0x2bd2 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e1 5a       	subi	r30, 0xA1	; 161
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	93 81       	ldd	r25, Z+3	; 0x03
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e2       	ldi	r20, 0x20	; 32
    2b60:	51 e4       	ldi	r21, 0x41	; 65
    2b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	8e 01       	movw	r16, r28
    2b6c:	07 5a       	subi	r16, 0xA7	; 167
    2b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b70:	bc 01       	movw	r22, r24
    2b72:	cd 01       	movw	r24, r26
    2b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	f8 01       	movw	r30, r16
    2b7e:	91 83       	std	Z+1, r25	; 0x01
    2b80:	80 83       	st	Z, r24
    2b82:	1f c0       	rjmp	.+62     	; 0x2bc2 <LCD_displayCharacter+0x134>
    2b84:	fe 01       	movw	r30, r28
    2b86:	e9 5a       	subi	r30, 0xA9	; 169
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	88 ec       	ldi	r24, 0xC8	; 200
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	91 83       	std	Z+1, r25	; 0x01
    2b90:	80 83       	st	Z, r24
    2b92:	fe 01       	movw	r30, r28
    2b94:	e9 5a       	subi	r30, 0xA9	; 169
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	80 81       	ld	r24, Z
    2b9a:	91 81       	ldd	r25, Z+1	; 0x01
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <LCD_displayCharacter+0x10e>
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e9 5a       	subi	r30, 0xA9	; 169
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	91 83       	std	Z+1, r25	; 0x01
    2ba8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2baa:	de 01       	movw	r26, r28
    2bac:	a7 5a       	subi	r26, 0xA7	; 167
    2bae:	bf 4f       	sbci	r27, 0xFF	; 255
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	e7 5a       	subi	r30, 0xA7	; 167
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	80 81       	ld	r24, Z
    2bb8:	91 81       	ldd	r25, Z+1	; 0x01
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	11 96       	adiw	r26, 0x01	; 1
    2bbe:	9c 93       	st	X, r25
    2bc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e7 5a       	subi	r30, 0xA7	; 167
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	80 81       	ld	r24, Z
    2bca:	91 81       	ldd	r25, Z+1	; 0x01
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	d1 f6       	brne	.-76     	; 0x2b84 <LCD_displayCharacter+0xf6>
    2bd0:	27 c0       	rjmp	.+78     	; 0x2c20 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd2:	8e 01       	movw	r16, r28
    2bd4:	07 5a       	subi	r16, 0xA7	; 167
    2bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e5 5a       	subi	r30, 0xA5	; 165
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	60 81       	ld	r22, Z
    2be0:	71 81       	ldd	r23, Z+1	; 0x01
    2be2:	82 81       	ldd	r24, Z+2	; 0x02
    2be4:	93 81       	ldd	r25, Z+3	; 0x03
    2be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	f8 01       	movw	r30, r16
    2bf0:	91 83       	std	Z+1, r25	; 0x01
    2bf2:	80 83       	st	Z, r24
    2bf4:	de 01       	movw	r26, r28
    2bf6:	ab 5a       	subi	r26, 0xAB	; 171
    2bf8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e7 5a       	subi	r30, 0xA7	; 167
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 81       	ld	r24, Z
    2c02:	91 81       	ldd	r25, Z+1	; 0x01
    2c04:	8d 93       	st	X+, r24
    2c06:	9c 93       	st	X, r25
    2c08:	fe 01       	movw	r30, r28
    2c0a:	eb 5a       	subi	r30, 0xAB	; 171
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	80 81       	ld	r24, Z
    2c10:	91 81       	ldd	r25, Z+1	; 0x01
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <LCD_displayCharacter+0x184>
    2c16:	fe 01       	movw	r30, r28
    2c18:	eb 5a       	subi	r30, 0xAB	; 171
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	91 83       	std	Z+1, r25	; 0x01
    2c1e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	60 e0       	ldi	r22, 0x00	; 0
    2c24:	41 e0       	ldi	r20, 0x01	; 1
    2c26:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	ef 5a       	subi	r30, 0xAF	; 175
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	a0 e8       	ldi	r26, 0x80	; 128
    2c36:	bf e3       	ldi	r27, 0x3F	; 63
    2c38:	80 83       	st	Z, r24
    2c3a:	91 83       	std	Z+1, r25	; 0x01
    2c3c:	a2 83       	std	Z+2, r26	; 0x02
    2c3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c40:	8e 01       	movw	r16, r28
    2c42:	03 5b       	subi	r16, 0xB3	; 179
    2c44:	1f 4f       	sbci	r17, 0xFF	; 255
    2c46:	fe 01       	movw	r30, r28
    2c48:	ef 5a       	subi	r30, 0xAF	; 175
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	60 81       	ld	r22, Z
    2c4e:	71 81       	ldd	r23, Z+1	; 0x01
    2c50:	82 81       	ldd	r24, Z+2	; 0x02
    2c52:	93 81       	ldd	r25, Z+3	; 0x03
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	4a ef       	ldi	r20, 0xFA	; 250
    2c5a:	54 e4       	ldi	r21, 0x44	; 68
    2c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	f8 01       	movw	r30, r16
    2c66:	80 83       	st	Z, r24
    2c68:	91 83       	std	Z+1, r25	; 0x01
    2c6a:	a2 83       	std	Z+2, r26	; 0x02
    2c6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c6e:	fe 01       	movw	r30, r28
    2c70:	e3 5b       	subi	r30, 0xB3	; 179
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	60 81       	ld	r22, Z
    2c76:	71 81       	ldd	r23, Z+1	; 0x01
    2c78:	82 81       	ldd	r24, Z+2	; 0x02
    2c7a:	93 81       	ldd	r25, Z+3	; 0x03
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e8       	ldi	r20, 0x80	; 128
    2c82:	5f e3       	ldi	r21, 0x3F	; 63
    2c84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c88:	88 23       	and	r24, r24
    2c8a:	44 f4       	brge	.+16     	; 0x2c9c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e5 5b       	subi	r30, 0xB5	; 181
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	91 83       	std	Z+1, r25	; 0x01
    2c98:	80 83       	st	Z, r24
    2c9a:	64 c0       	rjmp	.+200    	; 0x2d64 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e3 5b       	subi	r30, 0xB3	; 179
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	60 81       	ld	r22, Z
    2ca4:	71 81       	ldd	r23, Z+1	; 0x01
    2ca6:	82 81       	ldd	r24, Z+2	; 0x02
    2ca8:	93 81       	ldd	r25, Z+3	; 0x03
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	3f ef       	ldi	r19, 0xFF	; 255
    2cae:	4f e7       	ldi	r20, 0x7F	; 127
    2cb0:	57 e4       	ldi	r21, 0x47	; 71
    2cb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cb6:	18 16       	cp	r1, r24
    2cb8:	0c f0       	brlt	.+2      	; 0x2cbc <LCD_displayCharacter+0x22e>
    2cba:	43 c0       	rjmp	.+134    	; 0x2d42 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	ef 5a       	subi	r30, 0xAF	; 175
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	60 81       	ld	r22, Z
    2cc4:	71 81       	ldd	r23, Z+1	; 0x01
    2cc6:	82 81       	ldd	r24, Z+2	; 0x02
    2cc8:	93 81       	ldd	r25, Z+3	; 0x03
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e2       	ldi	r20, 0x20	; 32
    2cd0:	51 e4       	ldi	r21, 0x41	; 65
    2cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	8e 01       	movw	r16, r28
    2cdc:	05 5b       	subi	r16, 0xB5	; 181
    2cde:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce0:	bc 01       	movw	r22, r24
    2ce2:	cd 01       	movw	r24, r26
    2ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	f8 01       	movw	r30, r16
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	80 83       	st	Z, r24
    2cf2:	1f c0       	rjmp	.+62     	; 0x2d32 <LCD_displayCharacter+0x2a4>
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e7 5b       	subi	r30, 0xB7	; 183
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	88 ec       	ldi	r24, 0xC8	; 200
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	91 83       	std	Z+1, r25	; 0x01
    2d00:	80 83       	st	Z, r24
    2d02:	fe 01       	movw	r30, r28
    2d04:	e7 5b       	subi	r30, 0xB7	; 183
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	80 81       	ld	r24, Z
    2d0a:	91 81       	ldd	r25, Z+1	; 0x01
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	f1 f7       	brne	.-4      	; 0x2d0c <LCD_displayCharacter+0x27e>
    2d10:	fe 01       	movw	r30, r28
    2d12:	e7 5b       	subi	r30, 0xB7	; 183
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	91 83       	std	Z+1, r25	; 0x01
    2d18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1a:	de 01       	movw	r26, r28
    2d1c:	a5 5b       	subi	r26, 0xB5	; 181
    2d1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d20:	fe 01       	movw	r30, r28
    2d22:	e5 5b       	subi	r30, 0xB5	; 181
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	80 81       	ld	r24, Z
    2d28:	91 81       	ldd	r25, Z+1	; 0x01
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	11 96       	adiw	r26, 0x01	; 1
    2d2e:	9c 93       	st	X, r25
    2d30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d32:	fe 01       	movw	r30, r28
    2d34:	e5 5b       	subi	r30, 0xB5	; 181
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	80 81       	ld	r24, Z
    2d3a:	91 81       	ldd	r25, Z+1	; 0x01
    2d3c:	00 97       	sbiw	r24, 0x00	; 0
    2d3e:	d1 f6       	brne	.-76     	; 0x2cf4 <LCD_displayCharacter+0x266>
    2d40:	27 c0       	rjmp	.+78     	; 0x2d90 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d42:	8e 01       	movw	r16, r28
    2d44:	05 5b       	subi	r16, 0xB5	; 181
    2d46:	1f 4f       	sbci	r17, 0xFF	; 255
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e3 5b       	subi	r30, 0xB3	; 179
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	60 81       	ld	r22, Z
    2d50:	71 81       	ldd	r23, Z+1	; 0x01
    2d52:	82 81       	ldd	r24, Z+2	; 0x02
    2d54:	93 81       	ldd	r25, Z+3	; 0x03
    2d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	f8 01       	movw	r30, r16
    2d60:	91 83       	std	Z+1, r25	; 0x01
    2d62:	80 83       	st	Z, r24
    2d64:	de 01       	movw	r26, r28
    2d66:	a9 5b       	subi	r26, 0xB9	; 185
    2d68:	bf 4f       	sbci	r27, 0xFF	; 255
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e5 5b       	subi	r30, 0xB5	; 181
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	80 81       	ld	r24, Z
    2d72:	91 81       	ldd	r25, Z+1	; 0x01
    2d74:	8d 93       	st	X+, r24
    2d76:	9c 93       	st	X, r25
    2d78:	fe 01       	movw	r30, r28
    2d7a:	e9 5b       	subi	r30, 0xB9	; 185
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	80 81       	ld	r24, Z
    2d80:	91 81       	ldd	r25, Z+1	; 0x01
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	f1 f7       	brne	.-4      	; 0x2d82 <LCD_displayCharacter+0x2f4>
    2d86:	fe 01       	movw	r30, r28
    2d88:	e9 5b       	subi	r30, 0xB9	; 185
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	91 83       	std	Z+1, r25	; 0x01
    2d8e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2d90:	fe 01       	movw	r30, r28
    2d92:	ed 59       	subi	r30, 0x9D	; 157
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	80 81       	ld	r24, Z
    2d98:	88 2f       	mov	r24, r24
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	80 71       	andi	r24, 0x10	; 16
    2d9e:	90 70       	andi	r25, 0x00	; 0
    2da0:	95 95       	asr	r25
    2da2:	87 95       	ror	r24
    2da4:	95 95       	asr	r25
    2da6:	87 95       	ror	r24
    2da8:	95 95       	asr	r25
    2daa:	87 95       	ror	r24
    2dac:	95 95       	asr	r25
    2dae:	87 95       	ror	r24
    2db0:	98 2f       	mov	r25, r24
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	64 e0       	ldi	r22, 0x04	; 4
    2db6:	49 2f       	mov	r20, r25
    2db8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	ed 59       	subi	r30, 0x9D	; 157
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	80 81       	ld	r24, Z
    2dc4:	88 2f       	mov	r24, r24
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	80 72       	andi	r24, 0x20	; 32
    2dca:	90 70       	andi	r25, 0x00	; 0
    2dcc:	95 95       	asr	r25
    2dce:	87 95       	ror	r24
    2dd0:	95 95       	asr	r25
    2dd2:	87 95       	ror	r24
    2dd4:	95 95       	asr	r25
    2dd6:	87 95       	ror	r24
    2dd8:	95 95       	asr	r25
    2dda:	87 95       	ror	r24
    2ddc:	95 95       	asr	r25
    2dde:	87 95       	ror	r24
    2de0:	98 2f       	mov	r25, r24
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	65 e0       	ldi	r22, 0x05	; 5
    2de6:	49 2f       	mov	r20, r25
    2de8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2dec:	fe 01       	movw	r30, r28
    2dee:	ed 59       	subi	r30, 0x9D	; 157
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	80 81       	ld	r24, Z
    2df4:	88 2f       	mov	r24, r24
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	80 74       	andi	r24, 0x40	; 64
    2dfa:	90 70       	andi	r25, 0x00	; 0
    2dfc:	08 2e       	mov	r0, r24
    2dfe:	89 2f       	mov	r24, r25
    2e00:	00 0c       	add	r0, r0
    2e02:	88 1f       	adc	r24, r24
    2e04:	99 0b       	sbc	r25, r25
    2e06:	00 0c       	add	r0, r0
    2e08:	88 1f       	adc	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	98 2f       	mov	r25, r24
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	66 e0       	ldi	r22, 0x06	; 6
    2e12:	49 2f       	mov	r20, r25
    2e14:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2e18:	fe 01       	movw	r30, r28
    2e1a:	ed 59       	subi	r30, 0x9D	; 157
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	80 81       	ld	r24, Z
    2e20:	98 2f       	mov	r25, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	99 27       	eor	r25, r25
    2e26:	99 1f       	adc	r25, r25
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	67 e0       	ldi	r22, 0x07	; 7
    2e2c:	49 2f       	mov	r20, r25
    2e2e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
    2e32:	fe 01       	movw	r30, r28
    2e34:	ed 5b       	subi	r30, 0xBD	; 189
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	a0 e8       	ldi	r26, 0x80	; 128
    2e3e:	bf e3       	ldi	r27, 0x3F	; 63
    2e40:	80 83       	st	Z, r24
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	a2 83       	std	Z+2, r26	; 0x02
    2e46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e48:	8e 01       	movw	r16, r28
    2e4a:	01 5c       	subi	r16, 0xC1	; 193
    2e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4e:	fe 01       	movw	r30, r28
    2e50:	ed 5b       	subi	r30, 0xBD	; 189
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	60 81       	ld	r22, Z
    2e56:	71 81       	ldd	r23, Z+1	; 0x01
    2e58:	82 81       	ldd	r24, Z+2	; 0x02
    2e5a:	93 81       	ldd	r25, Z+3	; 0x03
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	4a ef       	ldi	r20, 0xFA	; 250
    2e62:	54 e4       	ldi	r21, 0x44	; 68
    2e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	f8 01       	movw	r30, r16
    2e6e:	80 83       	st	Z, r24
    2e70:	91 83       	std	Z+1, r25	; 0x01
    2e72:	a2 83       	std	Z+2, r26	; 0x02
    2e74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e76:	fe 01       	movw	r30, r28
    2e78:	ff 96       	adiw	r30, 0x3f	; 63
    2e7a:	60 81       	ld	r22, Z
    2e7c:	71 81       	ldd	r23, Z+1	; 0x01
    2e7e:	82 81       	ldd	r24, Z+2	; 0x02
    2e80:	93 81       	ldd	r25, Z+3	; 0x03
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e8       	ldi	r20, 0x80	; 128
    2e88:	5f e3       	ldi	r21, 0x3F	; 63
    2e8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e8e:	88 23       	and	r24, r24
    2e90:	2c f4       	brge	.+10     	; 0x2e9c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	9e af       	std	Y+62, r25	; 0x3e
    2e98:	8d af       	std	Y+61, r24	; 0x3d
    2e9a:	46 c0       	rjmp	.+140    	; 0x2f28 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	ff 96       	adiw	r30, 0x3f	; 63
    2ea0:	60 81       	ld	r22, Z
    2ea2:	71 81       	ldd	r23, Z+1	; 0x01
    2ea4:	82 81       	ldd	r24, Z+2	; 0x02
    2ea6:	93 81       	ldd	r25, Z+3	; 0x03
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	3f ef       	ldi	r19, 0xFF	; 255
    2eac:	4f e7       	ldi	r20, 0x7F	; 127
    2eae:	57 e4       	ldi	r21, 0x47	; 71
    2eb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eb4:	18 16       	cp	r1, r24
    2eb6:	64 f5       	brge	.+88     	; 0x2f10 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb8:	fe 01       	movw	r30, r28
    2eba:	ed 5b       	subi	r30, 0xBD	; 189
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	60 81       	ld	r22, Z
    2ec0:	71 81       	ldd	r23, Z+1	; 0x01
    2ec2:	82 81       	ldd	r24, Z+2	; 0x02
    2ec4:	93 81       	ldd	r25, Z+3	; 0x03
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	40 e2       	ldi	r20, 0x20	; 32
    2ecc:	51 e4       	ldi	r21, 0x41	; 65
    2ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	bc 01       	movw	r22, r24
    2ed8:	cd 01       	movw	r24, r26
    2eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	9e af       	std	Y+62, r25	; 0x3e
    2ee4:	8d af       	std	Y+61, r24	; 0x3d
    2ee6:	0f c0       	rjmp	.+30     	; 0x2f06 <LCD_displayCharacter+0x478>
    2ee8:	88 ec       	ldi	r24, 0xC8	; 200
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	9c af       	std	Y+60, r25	; 0x3c
    2eee:	8b af       	std	Y+59, r24	; 0x3b
    2ef0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ef2:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	f1 f7       	brne	.-4      	; 0x2ef4 <LCD_displayCharacter+0x466>
    2ef8:	9c af       	std	Y+60, r25	; 0x3c
    2efa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2efc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2efe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	9e af       	std	Y+62, r25	; 0x3e
    2f04:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f06:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f08:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f0a:	00 97       	sbiw	r24, 0x00	; 0
    2f0c:	69 f7       	brne	.-38     	; 0x2ee8 <LCD_displayCharacter+0x45a>
    2f0e:	16 c0       	rjmp	.+44     	; 0x2f3c <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f10:	fe 01       	movw	r30, r28
    2f12:	ff 96       	adiw	r30, 0x3f	; 63
    2f14:	60 81       	ld	r22, Z
    2f16:	71 81       	ldd	r23, Z+1	; 0x01
    2f18:	82 81       	ldd	r24, Z+2	; 0x02
    2f1a:	93 81       	ldd	r25, Z+3	; 0x03
    2f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	9e af       	std	Y+62, r25	; 0x3e
    2f26:	8d af       	std	Y+61, r24	; 0x3d
    2f28:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f2c:	9a af       	std	Y+58, r25	; 0x3a
    2f2e:	89 af       	std	Y+57, r24	; 0x39
    2f30:	89 ad       	ldd	r24, Y+57	; 0x39
    2f32:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <LCD_displayCharacter+0x4a6>
    2f38:	9a af       	std	Y+58, r25	; 0x3a
    2f3a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	60 e0       	ldi	r22, 0x00	; 0
    2f40:	40 e0       	ldi	r20, 0x00	; 0
    2f42:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	a0 e8       	ldi	r26, 0x80	; 128
    2f4c:	bf e3       	ldi	r27, 0x3F	; 63
    2f4e:	8d ab       	std	Y+53, r24	; 0x35
    2f50:	9e ab       	std	Y+54, r25	; 0x36
    2f52:	af ab       	std	Y+55, r26	; 0x37
    2f54:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f56:	6d a9       	ldd	r22, Y+53	; 0x35
    2f58:	7e a9       	ldd	r23, Y+54	; 0x36
    2f5a:	8f a9       	ldd	r24, Y+55	; 0x37
    2f5c:	98 ad       	ldd	r25, Y+56	; 0x38
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	4a ef       	ldi	r20, 0xFA	; 250
    2f64:	54 e4       	ldi	r21, 0x44	; 68
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	89 ab       	std	Y+49, r24	; 0x31
    2f70:	9a ab       	std	Y+50, r25	; 0x32
    2f72:	ab ab       	std	Y+51, r26	; 0x33
    2f74:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f76:	69 a9       	ldd	r22, Y+49	; 0x31
    2f78:	7a a9       	ldd	r23, Y+50	; 0x32
    2f7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	40 e8       	ldi	r20, 0x80	; 128
    2f84:	5f e3       	ldi	r21, 0x3F	; 63
    2f86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f8a:	88 23       	and	r24, r24
    2f8c:	2c f4       	brge	.+10     	; 0x2f98 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	98 ab       	std	Y+48, r25	; 0x30
    2f94:	8f a7       	std	Y+47, r24	; 0x2f
    2f96:	3f c0       	rjmp	.+126    	; 0x3016 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2f98:	69 a9       	ldd	r22, Y+49	; 0x31
    2f9a:	7a a9       	ldd	r23, Y+50	; 0x32
    2f9c:	8b a9       	ldd	r24, Y+51	; 0x33
    2f9e:	9c a9       	ldd	r25, Y+52	; 0x34
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	3f ef       	ldi	r19, 0xFF	; 255
    2fa4:	4f e7       	ldi	r20, 0x7F	; 127
    2fa6:	57 e4       	ldi	r21, 0x47	; 71
    2fa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fac:	18 16       	cp	r1, r24
    2fae:	4c f5       	brge	.+82     	; 0x3002 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb0:	6d a9       	ldd	r22, Y+53	; 0x35
    2fb2:	7e a9       	ldd	r23, Y+54	; 0x36
    2fb4:	8f a9       	ldd	r24, Y+55	; 0x37
    2fb6:	98 ad       	ldd	r25, Y+56	; 0x38
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e2       	ldi	r20, 0x20	; 32
    2fbe:	51 e4       	ldi	r21, 0x41	; 65
    2fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	98 ab       	std	Y+48, r25	; 0x30
    2fd6:	8f a7       	std	Y+47, r24	; 0x2f
    2fd8:	0f c0       	rjmp	.+30     	; 0x2ff8 <LCD_displayCharacter+0x56a>
    2fda:	88 ec       	ldi	r24, 0xC8	; 200
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	9e a7       	std	Y+46, r25	; 0x2e
    2fe0:	8d a7       	std	Y+45, r24	; 0x2d
    2fe2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fe4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <LCD_displayCharacter+0x558>
    2fea:	9e a7       	std	Y+46, r25	; 0x2e
    2fec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fee:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ff0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	98 ab       	std	Y+48, r25	; 0x30
    2ff6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ffa:	98 a9       	ldd	r25, Y+48	; 0x30
    2ffc:	00 97       	sbiw	r24, 0x00	; 0
    2ffe:	69 f7       	brne	.-38     	; 0x2fda <LCD_displayCharacter+0x54c>
    3000:	14 c0       	rjmp	.+40     	; 0x302a <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3002:	69 a9       	ldd	r22, Y+49	; 0x31
    3004:	7a a9       	ldd	r23, Y+50	; 0x32
    3006:	8b a9       	ldd	r24, Y+51	; 0x33
    3008:	9c a9       	ldd	r25, Y+52	; 0x34
    300a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	98 ab       	std	Y+48, r25	; 0x30
    3014:	8f a7       	std	Y+47, r24	; 0x2f
    3016:	8f a5       	ldd	r24, Y+47	; 0x2f
    3018:	98 a9       	ldd	r25, Y+48	; 0x30
    301a:	9c a7       	std	Y+44, r25	; 0x2c
    301c:	8b a7       	std	Y+43, r24	; 0x2b
    301e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3020:	9c a5       	ldd	r25, Y+44	; 0x2c
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <LCD_displayCharacter+0x594>
    3026:	9c a7       	std	Y+44, r25	; 0x2c
    3028:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	60 e0       	ldi	r22, 0x00	; 0
    302e:	41 e0       	ldi	r20, 0x01	; 1
    3030:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	a0 e8       	ldi	r26, 0x80	; 128
    303a:	bf e3       	ldi	r27, 0x3F	; 63
    303c:	8f a3       	std	Y+39, r24	; 0x27
    303e:	98 a7       	std	Y+40, r25	; 0x28
    3040:	a9 a7       	std	Y+41, r26	; 0x29
    3042:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3044:	6f a1       	ldd	r22, Y+39	; 0x27
    3046:	78 a5       	ldd	r23, Y+40	; 0x28
    3048:	89 a5       	ldd	r24, Y+41	; 0x29
    304a:	9a a5       	ldd	r25, Y+42	; 0x2a
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	4a ef       	ldi	r20, 0xFA	; 250
    3052:	54 e4       	ldi	r21, 0x44	; 68
    3054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	8b a3       	std	Y+35, r24	; 0x23
    305e:	9c a3       	std	Y+36, r25	; 0x24
    3060:	ad a3       	std	Y+37, r26	; 0x25
    3062:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3064:	6b a1       	ldd	r22, Y+35	; 0x23
    3066:	7c a1       	ldd	r23, Y+36	; 0x24
    3068:	8d a1       	ldd	r24, Y+37	; 0x25
    306a:	9e a1       	ldd	r25, Y+38	; 0x26
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e8       	ldi	r20, 0x80	; 128
    3072:	5f e3       	ldi	r21, 0x3F	; 63
    3074:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3078:	88 23       	and	r24, r24
    307a:	2c f4       	brge	.+10     	; 0x3086 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	9a a3       	std	Y+34, r25	; 0x22
    3082:	89 a3       	std	Y+33, r24	; 0x21
    3084:	3f c0       	rjmp	.+126    	; 0x3104 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3086:	6b a1       	ldd	r22, Y+35	; 0x23
    3088:	7c a1       	ldd	r23, Y+36	; 0x24
    308a:	8d a1       	ldd	r24, Y+37	; 0x25
    308c:	9e a1       	ldd	r25, Y+38	; 0x26
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	3f ef       	ldi	r19, 0xFF	; 255
    3092:	4f e7       	ldi	r20, 0x7F	; 127
    3094:	57 e4       	ldi	r21, 0x47	; 71
    3096:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    309a:	18 16       	cp	r1, r24
    309c:	4c f5       	brge	.+82     	; 0x30f0 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    309e:	6f a1       	ldd	r22, Y+39	; 0x27
    30a0:	78 a5       	ldd	r23, Y+40	; 0x28
    30a2:	89 a5       	ldd	r24, Y+41	; 0x29
    30a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 e2       	ldi	r20, 0x20	; 32
    30ac:	51 e4       	ldi	r21, 0x41	; 65
    30ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	bc 01       	movw	r22, r24
    30b8:	cd 01       	movw	r24, r26
    30ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	9a a3       	std	Y+34, r25	; 0x22
    30c4:	89 a3       	std	Y+33, r24	; 0x21
    30c6:	0f c0       	rjmp	.+30     	; 0x30e6 <LCD_displayCharacter+0x658>
    30c8:	88 ec       	ldi	r24, 0xC8	; 200
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	98 a3       	std	Y+32, r25	; 0x20
    30ce:	8f 8f       	std	Y+31, r24	; 0x1f
    30d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30d2:	98 a1       	ldd	r25, Y+32	; 0x20
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	f1 f7       	brne	.-4      	; 0x30d4 <LCD_displayCharacter+0x646>
    30d8:	98 a3       	std	Y+32, r25	; 0x20
    30da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30dc:	89 a1       	ldd	r24, Y+33	; 0x21
    30de:	9a a1       	ldd	r25, Y+34	; 0x22
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	9a a3       	std	Y+34, r25	; 0x22
    30e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e6:	89 a1       	ldd	r24, Y+33	; 0x21
    30e8:	9a a1       	ldd	r25, Y+34	; 0x22
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	69 f7       	brne	.-38     	; 0x30c8 <LCD_displayCharacter+0x63a>
    30ee:	14 c0       	rjmp	.+40     	; 0x3118 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f0:	6b a1       	ldd	r22, Y+35	; 0x23
    30f2:	7c a1       	ldd	r23, Y+36	; 0x24
    30f4:	8d a1       	ldd	r24, Y+37	; 0x25
    30f6:	9e a1       	ldd	r25, Y+38	; 0x26
    30f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	9a a3       	std	Y+34, r25	; 0x22
    3102:	89 a3       	std	Y+33, r24	; 0x21
    3104:	89 a1       	ldd	r24, Y+33	; 0x21
    3106:	9a a1       	ldd	r25, Y+34	; 0x22
    3108:	9e 8f       	std	Y+30, r25	; 0x1e
    310a:	8d 8f       	std	Y+29, r24	; 0x1d
    310c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    310e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	f1 f7       	brne	.-4      	; 0x3110 <LCD_displayCharacter+0x682>
    3114:	9e 8f       	std	Y+30, r25	; 0x1e
    3116:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3118:	fe 01       	movw	r30, r28
    311a:	ed 59       	subi	r30, 0x9D	; 157
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	80 81       	ld	r24, Z
    3120:	98 2f       	mov	r25, r24
    3122:	91 70       	andi	r25, 0x01	; 1
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	64 e0       	ldi	r22, 0x04	; 4
    3128:	49 2f       	mov	r20, r25
    312a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    312e:	fe 01       	movw	r30, r28
    3130:	ed 59       	subi	r30, 0x9D	; 157
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	80 81       	ld	r24, Z
    3136:	88 2f       	mov	r24, r24
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	82 70       	andi	r24, 0x02	; 2
    313c:	90 70       	andi	r25, 0x00	; 0
    313e:	95 95       	asr	r25
    3140:	87 95       	ror	r24
    3142:	98 2f       	mov	r25, r24
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	65 e0       	ldi	r22, 0x05	; 5
    3148:	49 2f       	mov	r20, r25
    314a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    314e:	fe 01       	movw	r30, r28
    3150:	ed 59       	subi	r30, 0x9D	; 157
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	80 81       	ld	r24, Z
    3156:	88 2f       	mov	r24, r24
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	84 70       	andi	r24, 0x04	; 4
    315c:	90 70       	andi	r25, 0x00	; 0
    315e:	95 95       	asr	r25
    3160:	87 95       	ror	r24
    3162:	95 95       	asr	r25
    3164:	87 95       	ror	r24
    3166:	98 2f       	mov	r25, r24
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	66 e0       	ldi	r22, 0x06	; 6
    316c:	49 2f       	mov	r20, r25
    316e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3172:	fe 01       	movw	r30, r28
    3174:	ed 59       	subi	r30, 0x9D	; 157
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	80 81       	ld	r24, Z
    317a:	88 2f       	mov	r24, r24
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	88 70       	andi	r24, 0x08	; 8
    3180:	90 70       	andi	r25, 0x00	; 0
    3182:	95 95       	asr	r25
    3184:	87 95       	ror	r24
    3186:	95 95       	asr	r25
    3188:	87 95       	ror	r24
    318a:	95 95       	asr	r25
    318c:	87 95       	ror	r24
    318e:	98 2f       	mov	r25, r24
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	67 e0       	ldi	r22, 0x07	; 7
    3194:	49 2f       	mov	r20, r25
    3196:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	a0 e8       	ldi	r26, 0x80	; 128
    31a0:	bf e3       	ldi	r27, 0x3F	; 63
    31a2:	89 8f       	std	Y+25, r24	; 0x19
    31a4:	9a 8f       	std	Y+26, r25	; 0x1a
    31a6:	ab 8f       	std	Y+27, r26	; 0x1b
    31a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31aa:	69 8d       	ldd	r22, Y+25	; 0x19
    31ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	4a ef       	ldi	r20, 0xFA	; 250
    31b8:	54 e4       	ldi	r21, 0x44	; 68
    31ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	8d 8b       	std	Y+21, r24	; 0x15
    31c4:	9e 8b       	std	Y+22, r25	; 0x16
    31c6:	af 8b       	std	Y+23, r26	; 0x17
    31c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31ca:	6d 89       	ldd	r22, Y+21	; 0x15
    31cc:	7e 89       	ldd	r23, Y+22	; 0x16
    31ce:	8f 89       	ldd	r24, Y+23	; 0x17
    31d0:	98 8d       	ldd	r25, Y+24	; 0x18
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	40 e8       	ldi	r20, 0x80	; 128
    31d8:	5f e3       	ldi	r21, 0x3F	; 63
    31da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31de:	88 23       	and	r24, r24
    31e0:	2c f4       	brge	.+10     	; 0x31ec <LCD_displayCharacter+0x75e>
		__ticks = 1;
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	9c 8b       	std	Y+20, r25	; 0x14
    31e8:	8b 8b       	std	Y+19, r24	; 0x13
    31ea:	3f c0       	rjmp	.+126    	; 0x326a <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    31ec:	6d 89       	ldd	r22, Y+21	; 0x15
    31ee:	7e 89       	ldd	r23, Y+22	; 0x16
    31f0:	8f 89       	ldd	r24, Y+23	; 0x17
    31f2:	98 8d       	ldd	r25, Y+24	; 0x18
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	3f ef       	ldi	r19, 0xFF	; 255
    31f8:	4f e7       	ldi	r20, 0x7F	; 127
    31fa:	57 e4       	ldi	r21, 0x47	; 71
    31fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3200:	18 16       	cp	r1, r24
    3202:	4c f5       	brge	.+82     	; 0x3256 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3204:	69 8d       	ldd	r22, Y+25	; 0x19
    3206:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3208:	8b 8d       	ldd	r24, Y+27	; 0x1b
    320a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	40 e2       	ldi	r20, 0x20	; 32
    3212:	51 e4       	ldi	r21, 0x41	; 65
    3214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	bc 01       	movw	r22, r24
    321e:	cd 01       	movw	r24, r26
    3220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	9c 8b       	std	Y+20, r25	; 0x14
    322a:	8b 8b       	std	Y+19, r24	; 0x13
    322c:	0f c0       	rjmp	.+30     	; 0x324c <LCD_displayCharacter+0x7be>
    322e:	88 ec       	ldi	r24, 0xC8	; 200
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	9a 8b       	std	Y+18, r25	; 0x12
    3234:	89 8b       	std	Y+17, r24	; 0x11
    3236:	89 89       	ldd	r24, Y+17	; 0x11
    3238:	9a 89       	ldd	r25, Y+18	; 0x12
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <LCD_displayCharacter+0x7ac>
    323e:	9a 8b       	std	Y+18, r25	; 0x12
    3240:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3242:	8b 89       	ldd	r24, Y+19	; 0x13
    3244:	9c 89       	ldd	r25, Y+20	; 0x14
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	9c 8b       	std	Y+20, r25	; 0x14
    324a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324c:	8b 89       	ldd	r24, Y+19	; 0x13
    324e:	9c 89       	ldd	r25, Y+20	; 0x14
    3250:	00 97       	sbiw	r24, 0x00	; 0
    3252:	69 f7       	brne	.-38     	; 0x322e <LCD_displayCharacter+0x7a0>
    3254:	14 c0       	rjmp	.+40     	; 0x327e <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3256:	6d 89       	ldd	r22, Y+21	; 0x15
    3258:	7e 89       	ldd	r23, Y+22	; 0x16
    325a:	8f 89       	ldd	r24, Y+23	; 0x17
    325c:	98 8d       	ldd	r25, Y+24	; 0x18
    325e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	9c 8b       	std	Y+20, r25	; 0x14
    3268:	8b 8b       	std	Y+19, r24	; 0x13
    326a:	8b 89       	ldd	r24, Y+19	; 0x13
    326c:	9c 89       	ldd	r25, Y+20	; 0x14
    326e:	98 8b       	std	Y+16, r25	; 0x10
    3270:	8f 87       	std	Y+15, r24	; 0x0f
    3272:	8f 85       	ldd	r24, Y+15	; 0x0f
    3274:	98 89       	ldd	r25, Y+16	; 0x10
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	f1 f7       	brne	.-4      	; 0x3276 <LCD_displayCharacter+0x7e8>
    327a:	98 8b       	std	Y+16, r25	; 0x10
    327c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	60 e0       	ldi	r22, 0x00	; 0
    3282:	40 e0       	ldi	r20, 0x00	; 0
    3284:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_writePin>
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	a0 e8       	ldi	r26, 0x80	; 128
    328e:	bf e3       	ldi	r27, 0x3F	; 63
    3290:	8b 87       	std	Y+11, r24	; 0x0b
    3292:	9c 87       	std	Y+12, r25	; 0x0c
    3294:	ad 87       	std	Y+13, r26	; 0x0d
    3296:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3298:	6b 85       	ldd	r22, Y+11	; 0x0b
    329a:	7c 85       	ldd	r23, Y+12	; 0x0c
    329c:	8d 85       	ldd	r24, Y+13	; 0x0d
    329e:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	4a ef       	ldi	r20, 0xFA	; 250
    32a6:	54 e4       	ldi	r21, 0x44	; 68
    32a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	8f 83       	std	Y+7, r24	; 0x07
    32b2:	98 87       	std	Y+8, r25	; 0x08
    32b4:	a9 87       	std	Y+9, r26	; 0x09
    32b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32b8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ba:	78 85       	ldd	r23, Y+8	; 0x08
    32bc:	89 85       	ldd	r24, Y+9	; 0x09
    32be:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	40 e8       	ldi	r20, 0x80	; 128
    32c6:	5f e3       	ldi	r21, 0x3F	; 63
    32c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32cc:	88 23       	and	r24, r24
    32ce:	2c f4       	brge	.+10     	; 0x32da <LCD_displayCharacter+0x84c>
		__ticks = 1;
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	9e 83       	std	Y+6, r25	; 0x06
    32d6:	8d 83       	std	Y+5, r24	; 0x05
    32d8:	3f c0       	rjmp	.+126    	; 0x3358 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    32da:	6f 81       	ldd	r22, Y+7	; 0x07
    32dc:	78 85       	ldd	r23, Y+8	; 0x08
    32de:	89 85       	ldd	r24, Y+9	; 0x09
    32e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	3f ef       	ldi	r19, 0xFF	; 255
    32e6:	4f e7       	ldi	r20, 0x7F	; 127
    32e8:	57 e4       	ldi	r21, 0x47	; 71
    32ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ee:	18 16       	cp	r1, r24
    32f0:	4c f5       	brge	.+82     	; 0x3344 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	40 e2       	ldi	r20, 0x20	; 32
    3300:	51 e4       	ldi	r21, 0x41	; 65
    3302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	bc 01       	movw	r22, r24
    330c:	cd 01       	movw	r24, r26
    330e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	9e 83       	std	Y+6, r25	; 0x06
    3318:	8d 83       	std	Y+5, r24	; 0x05
    331a:	0f c0       	rjmp	.+30     	; 0x333a <LCD_displayCharacter+0x8ac>
    331c:	88 ec       	ldi	r24, 0xC8	; 200
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	9c 83       	std	Y+4, r25	; 0x04
    3322:	8b 83       	std	Y+3, r24	; 0x03
    3324:	8b 81       	ldd	r24, Y+3	; 0x03
    3326:	9c 81       	ldd	r25, Y+4	; 0x04
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	f1 f7       	brne	.-4      	; 0x3328 <LCD_displayCharacter+0x89a>
    332c:	9c 83       	std	Y+4, r25	; 0x04
    332e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3330:	8d 81       	ldd	r24, Y+5	; 0x05
    3332:	9e 81       	ldd	r25, Y+6	; 0x06
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	9e 83       	std	Y+6, r25	; 0x06
    3338:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    333a:	8d 81       	ldd	r24, Y+5	; 0x05
    333c:	9e 81       	ldd	r25, Y+6	; 0x06
    333e:	00 97       	sbiw	r24, 0x00	; 0
    3340:	69 f7       	brne	.-38     	; 0x331c <LCD_displayCharacter+0x88e>
    3342:	14 c0       	rjmp	.+40     	; 0x336c <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3344:	6f 81       	ldd	r22, Y+7	; 0x07
    3346:	78 85       	ldd	r23, Y+8	; 0x08
    3348:	89 85       	ldd	r24, Y+9	; 0x09
    334a:	9a 85       	ldd	r25, Y+10	; 0x0a
    334c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	9e 83       	std	Y+6, r25	; 0x06
    3356:	8d 83       	std	Y+5, r24	; 0x05
    3358:	8d 81       	ldd	r24, Y+5	; 0x05
    335a:	9e 81       	ldd	r25, Y+6	; 0x06
    335c:	9a 83       	std	Y+2, r25	; 0x02
    335e:	89 83       	std	Y+1, r24	; 0x01
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	9a 81       	ldd	r25, Y+2	; 0x02
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	f1 f7       	brne	.-4      	; 0x3364 <LCD_displayCharacter+0x8d6>
    3368:	9a 83       	std	Y+2, r25	; 0x02
    336a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    336c:	cd 59       	subi	r28, 0x9D	; 157
    336e:	df 4f       	sbci	r29, 0xFF	; 255
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	de bf       	out	0x3e, r29	; 62
    3376:	0f be       	out	0x3f, r0	; 63
    3378:	cd bf       	out	0x3d, r28	; 61
    337a:	cf 91       	pop	r28
    337c:	df 91       	pop	r29
    337e:	1f 91       	pop	r17
    3380:	0f 91       	pop	r16
    3382:	08 95       	ret

00003384 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3384:	df 93       	push	r29
    3386:	cf 93       	push	r28
    3388:	00 d0       	rcall	.+0      	; 0x338a <LCD_displayString+0x6>
    338a:	0f 92       	push	r0
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
    3390:	9b 83       	std	Y+3, r25	; 0x03
    3392:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3394:	19 82       	std	Y+1, r1	; 0x01
    3396:	0e c0       	rjmp	.+28     	; 0x33b4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	28 2f       	mov	r18, r24
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	8a 81       	ldd	r24, Y+2	; 0x02
    33a0:	9b 81       	ldd	r25, Y+3	; 0x03
    33a2:	fc 01       	movw	r30, r24
    33a4:	e2 0f       	add	r30, r18
    33a6:	f3 1f       	adc	r31, r19
    33a8:	80 81       	ld	r24, Z
    33aa:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_displayCharacter>
		i++;
    33ae:	89 81       	ldd	r24, Y+1	; 0x01
    33b0:	8f 5f       	subi	r24, 0xFF	; 255
    33b2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    33b4:	89 81       	ldd	r24, Y+1	; 0x01
    33b6:	28 2f       	mov	r18, r24
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	8a 81       	ldd	r24, Y+2	; 0x02
    33bc:	9b 81       	ldd	r25, Y+3	; 0x03
    33be:	fc 01       	movw	r30, r24
    33c0:	e2 0f       	add	r30, r18
    33c2:	f3 1f       	adc	r31, r19
    33c4:	80 81       	ld	r24, Z
    33c6:	88 23       	and	r24, r24
    33c8:	39 f7       	brne	.-50     	; 0x3398 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    33ca:	0f 90       	pop	r0
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	cf 91       	pop	r28
    33d2:	df 91       	pop	r29
    33d4:	08 95       	ret

000033d6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    33d6:	df 93       	push	r29
    33d8:	cf 93       	push	r28
    33da:	00 d0       	rcall	.+0      	; 0x33dc <LCD_moveCursor+0x6>
    33dc:	00 d0       	rcall	.+0      	; 0x33de <LCD_moveCursor+0x8>
    33de:	0f 92       	push	r0
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
    33e4:	8a 83       	std	Y+2, r24	; 0x02
    33e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    33e8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ea:	28 2f       	mov	r18, r24
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	3d 83       	std	Y+5, r19	; 0x05
    33f0:	2c 83       	std	Y+4, r18	; 0x04
    33f2:	8c 81       	ldd	r24, Y+4	; 0x04
    33f4:	9d 81       	ldd	r25, Y+5	; 0x05
    33f6:	81 30       	cpi	r24, 0x01	; 1
    33f8:	91 05       	cpc	r25, r1
    33fa:	c1 f0       	breq	.+48     	; 0x342c <LCD_moveCursor+0x56>
    33fc:	2c 81       	ldd	r18, Y+4	; 0x04
    33fe:	3d 81       	ldd	r19, Y+5	; 0x05
    3400:	22 30       	cpi	r18, 0x02	; 2
    3402:	31 05       	cpc	r19, r1
    3404:	2c f4       	brge	.+10     	; 0x3410 <LCD_moveCursor+0x3a>
    3406:	8c 81       	ldd	r24, Y+4	; 0x04
    3408:	9d 81       	ldd	r25, Y+5	; 0x05
    340a:	00 97       	sbiw	r24, 0x00	; 0
    340c:	61 f0       	breq	.+24     	; 0x3426 <LCD_moveCursor+0x50>
    340e:	19 c0       	rjmp	.+50     	; 0x3442 <LCD_moveCursor+0x6c>
    3410:	2c 81       	ldd	r18, Y+4	; 0x04
    3412:	3d 81       	ldd	r19, Y+5	; 0x05
    3414:	22 30       	cpi	r18, 0x02	; 2
    3416:	31 05       	cpc	r19, r1
    3418:	69 f0       	breq	.+26     	; 0x3434 <LCD_moveCursor+0x5e>
    341a:	8c 81       	ldd	r24, Y+4	; 0x04
    341c:	9d 81       	ldd	r25, Y+5	; 0x05
    341e:	83 30       	cpi	r24, 0x03	; 3
    3420:	91 05       	cpc	r25, r1
    3422:	61 f0       	breq	.+24     	; 0x343c <LCD_moveCursor+0x66>
    3424:	0e c0       	rjmp	.+28     	; 0x3442 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3426:	8b 81       	ldd	r24, Y+3	; 0x03
    3428:	89 83       	std	Y+1, r24	; 0x01
    342a:	0b c0       	rjmp	.+22     	; 0x3442 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    342c:	8b 81       	ldd	r24, Y+3	; 0x03
    342e:	80 5c       	subi	r24, 0xC0	; 192
    3430:	89 83       	std	Y+1, r24	; 0x01
    3432:	07 c0       	rjmp	.+14     	; 0x3442 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3434:	8b 81       	ldd	r24, Y+3	; 0x03
    3436:	80 5f       	subi	r24, 0xF0	; 240
    3438:	89 83       	std	Y+1, r24	; 0x01
    343a:	03 c0       	rjmp	.+6      	; 0x3442 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    343c:	8b 81       	ldd	r24, Y+3	; 0x03
    343e:	80 5b       	subi	r24, 0xB0	; 176
    3440:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3442:	89 81       	ldd	r24, Y+1	; 0x01
    3444:	80 68       	ori	r24, 0x80	; 128
    3446:	0e 94 cc 10 	call	0x2198	; 0x2198 <LCD_sendCommand>
}
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	cf 91       	pop	r28
    3456:	df 91       	pop	r29
    3458:	08 95       	ret

0000345a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	00 d0       	rcall	.+0      	; 0x3460 <LCD_displayStringRowColumn+0x6>
    3460:	00 d0       	rcall	.+0      	; 0x3462 <LCD_displayStringRowColumn+0x8>
    3462:	cd b7       	in	r28, 0x3d	; 61
    3464:	de b7       	in	r29, 0x3e	; 62
    3466:	89 83       	std	Y+1, r24	; 0x01
    3468:	6a 83       	std	Y+2, r22	; 0x02
    346a:	5c 83       	std	Y+4, r21	; 0x04
    346c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	6a 81       	ldd	r22, Y+2	; 0x02
    3472:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3476:	8b 81       	ldd	r24, Y+3	; 0x03
    3478:	9c 81       	ldd	r25, Y+4	; 0x04
    347a:	0e 94 c2 19 	call	0x3384	; 0x3384 <LCD_displayString>
}
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	0f 90       	pop	r0
    3484:	0f 90       	pop	r0
    3486:	cf 91       	pop	r28
    3488:	df 91       	pop	r29
    348a:	08 95       	ret

0000348c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    348c:	df 93       	push	r29
    348e:	cf 93       	push	r28
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
    3494:	62 97       	sbiw	r28, 0x12	; 18
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	f8 94       	cli
    349a:	de bf       	out	0x3e, r29	; 62
    349c:	0f be       	out	0x3f, r0	; 63
    349e:	cd bf       	out	0x3d, r28	; 61
    34a0:	9a 8b       	std	Y+18, r25	; 0x12
    34a2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    34a4:	89 89       	ldd	r24, Y+17	; 0x11
    34a6:	9a 89       	ldd	r25, Y+18	; 0x12
    34a8:	9e 01       	movw	r18, r28
    34aa:	2f 5f       	subi	r18, 0xFF	; 255
    34ac:	3f 4f       	sbci	r19, 0xFF	; 255
    34ae:	b9 01       	movw	r22, r18
    34b0:	4a e0       	ldi	r20, 0x0A	; 10
    34b2:	50 e0       	ldi	r21, 0x00	; 0
    34b4:	0e 94 9c 1b 	call	0x3738	; 0x3738 <itoa>
   LCD_displayString(buff); /* Display the string */
    34b8:	ce 01       	movw	r24, r28
    34ba:	01 96       	adiw	r24, 0x01	; 1
    34bc:	0e 94 c2 19 	call	0x3384	; 0x3384 <LCD_displayString>
}
    34c0:	62 96       	adiw	r28, 0x12	; 18
    34c2:	0f b6       	in	r0, 0x3f	; 63
    34c4:	f8 94       	cli
    34c6:	de bf       	out	0x3e, r29	; 62
    34c8:	0f be       	out	0x3f, r0	; 63
    34ca:	cd bf       	out	0x3d, r28	; 61
    34cc:	cf 91       	pop	r28
    34ce:	df 91       	pop	r29
    34d0:	08 95       	ret

000034d2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    34d2:	df 93       	push	r29
    34d4:	cf 93       	push	r28
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	0e 94 cc 10 	call	0x2198	; 0x2198 <LCD_sendCommand>
}
    34e0:	cf 91       	pop	r28
    34e2:	df 91       	pop	r29
    34e4:	08 95       	ret

000034e6 <LCD_Add_Custom_Char>:

void LCD_Add_Custom_Char (uint8 loc, uint8 *msg)
{
    34e6:	df 93       	push	r29
    34e8:	cf 93       	push	r28
    34ea:	00 d0       	rcall	.+0      	; 0x34ec <LCD_Add_Custom_Char+0x6>
    34ec:	00 d0       	rcall	.+0      	; 0x34ee <LCD_Add_Custom_Char+0x8>
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	8a 83       	std	Y+2, r24	; 0x02
    34f4:	7c 83       	std	Y+4, r23	; 0x04
    34f6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 i;
	if(loc<8)
    34f8:	8a 81       	ldd	r24, Y+2	; 0x02
    34fa:	88 30       	cpi	r24, 0x08	; 8
    34fc:	f8 f4       	brcc	.+62     	; 0x353c <LCD_Add_Custom_Char+0x56>
	{
		LCD_sendCommand(0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
    34fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3500:	88 2f       	mov	r24, r24
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	08 96       	adiw	r24, 0x08	; 8
    3506:	88 0f       	add	r24, r24
    3508:	99 1f       	adc	r25, r25
    350a:	88 0f       	add	r24, r24
    350c:	99 1f       	adc	r25, r25
    350e:	88 0f       	add	r24, r24
    3510:	99 1f       	adc	r25, r25
    3512:	0e 94 cc 10 	call	0x2198	; 0x2198 <LCD_sendCommand>
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
    3516:	19 82       	std	Y+1, r1	; 0x01
    3518:	0e c0       	rjmp	.+28     	; 0x3536 <LCD_Add_Custom_Char+0x50>
		LCD_displayCharacter(msg[i]);
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	28 2f       	mov	r18, r24
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	8b 81       	ldd	r24, Y+3	; 0x03
    3522:	9c 81       	ldd	r25, Y+4	; 0x04
    3524:	fc 01       	movw	r30, r24
    3526:	e2 0f       	add	r30, r18
    3528:	f3 1f       	adc	r31, r19
    352a:	80 81       	ld	r24, Z
    352c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_displayCharacter>
{
	uint8 i;
	if(loc<8)
	{
		LCD_sendCommand(0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
    3530:	89 81       	ldd	r24, Y+1	; 0x01
    3532:	8f 5f       	subi	r24, 0xFF	; 255
    3534:	89 83       	std	Y+1, r24	; 0x01
    3536:	89 81       	ldd	r24, Y+1	; 0x01
    3538:	88 30       	cpi	r24, 0x08	; 8
    353a:	78 f3       	brcs	.-34     	; 0x351a <LCD_Add_Custom_Char+0x34>
		LCD_displayCharacter(msg[i]);
	}
}
    353c:	0f 90       	pop	r0
    353e:	0f 90       	pop	r0
    3540:	0f 90       	pop	r0
    3542:	0f 90       	pop	r0
    3544:	cf 91       	pop	r28
    3546:	df 91       	pop	r29
    3548:	08 95       	ret

0000354a <PWM_Timer0_Generate>:
#include "pwm.h"
#include "gpio.h" /* to use GPIO_setupPinDirection function*/

/* function responsible for generate pwm signal using timer0 with different duty cycles*/
void PWM_Timer0_Generate(uint8 duty_cycle)
{
    354a:	0f 93       	push	r16
    354c:	1f 93       	push	r17
    354e:	df 93       	push	r29
    3550:	cf 93       	push	r28
    3552:	0f 92       	push	r0
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
    3558:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; // Set Timer Initial Value to 0
    355a:	e2 e5       	ldi	r30, 0x52	; 82
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	10 82       	st	Z, r1

	if(duty_cycle <100)
    3560:	89 81       	ldd	r24, Y+1	; 0x01
    3562:	84 36       	cpi	r24, 0x64	; 100
    3564:	c0 f4       	brcc	.+48     	; 0x3596 <PWM_Timer0_Generate+0x4c>
		OCR0  = (uint8)( ((uint32)duty_cycle*256)/100 ); //Set Compare value
    3566:	0c e5       	ldi	r16, 0x5C	; 92
    3568:	10 e0       	ldi	r17, 0x00	; 0
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	88 2f       	mov	r24, r24
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	a0 e0       	ldi	r26, 0x00	; 0
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	ba 2f       	mov	r27, r26
    3576:	a9 2f       	mov	r26, r25
    3578:	98 2f       	mov	r25, r24
    357a:	88 27       	eor	r24, r24
    357c:	24 e6       	ldi	r18, 0x64	; 100
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	40 e0       	ldi	r20, 0x00	; 0
    3582:	50 e0       	ldi	r21, 0x00	; 0
    3584:	bc 01       	movw	r22, r24
    3586:	cd 01       	movw	r24, r26
    3588:	0e 94 43 1b 	call	0x3686	; 0x3686 <__udivmodsi4>
    358c:	da 01       	movw	r26, r20
    358e:	c9 01       	movw	r24, r18
    3590:	f8 01       	movw	r30, r16
    3592:	80 83       	st	Z, r24
    3594:	07 c0       	rjmp	.+14     	; 0x35a4 <PWM_Timer0_Generate+0x5a>
	else if (duty_cycle ==100)
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	84 36       	cpi	r24, 0x64	; 100
    359a:	21 f4       	brne	.+8      	; 0x35a4 <PWM_Timer0_Generate+0x5a>
		OCR0=255; /*to avoid the overflow (256 exceed the range of uint8)*/
    359c:	ec e5       	ldi	r30, 0x5C	; 92
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	8f ef       	ldi	r24, 0xFF	; 255
    35a2:	80 83       	st	Z, r24

	GPIO_setupPinDirection(pwm_PORT_ID,pwm_PIN_ID,PIN_OUTPUT); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	63 e0       	ldi	r22, 0x03	; 3
    35a8:	41 e0       	ldi	r20, 0x01	; 1
    35aa:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    35ae:	e3 e5       	ldi	r30, 0x53	; 83
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	8a e6       	ldi	r24, 0x6A	; 106
    35b4:	80 83       	st	Z, r24
}
    35b6:	0f 90       	pop	r0
    35b8:	cf 91       	pop	r28
    35ba:	df 91       	pop	r29
    35bc:	1f 91       	pop	r17
    35be:	0f 91       	pop	r16
    35c0:	08 95       	ret

000035c2 <PWM_vInit_T1_FastMode>:


/*Function responsible for initializing the timer1 for pwm in fast mode */
void PWM_vInit_T1_FastMode()
{
    35c2:	df 93       	push	r29
    35c4:	cf 93       	push	r28
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
	
	//we made it CLR on compare to get the desired correct signal for servo
	// Make OC1A pin as output
	GPIO_setupPinDirection(PORTD_ID, PIN_NO_5,OUTPUT);
    35ca:	83 e0       	ldi	r24, 0x03	; 3
    35cc:	65 e0       	ldi	r22, 0x05	; 5
    35ce:	41 e0       	ldi	r20, 0x01	; 1
    35d0:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <GPIO_setupPinDirection>
	//checked  //Set timer1 count zero
	TCNT1 = 0 ;
    35d4:	ec e4       	ldi	r30, 0x4C	; 76
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	11 82       	std	Z+1, r1	; 0x01
    35da:	10 82       	st	Z, r1

	//Set Fast PWM-8bit, TOP in ICR1, Clr OC1A on compare match, Clk/64
	TCCR1A = (1<<PIN_NO_0) ;
    35dc:	ef e4       	ldi	r30, 0x4F	; 79
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	80 83       	st	Z, r24
	TCCR1B = (1<<PIN_NO_3) | (1<<PIN_NO_0) | (1<<PIN_NO_1) ;
    35e4:	ee e4       	ldi	r30, 0x4E	; 78
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	8b e0       	ldi	r24, 0x0B	; 11
    35ea:	80 83       	st	Z, r24
}
    35ec:	cf 91       	pop	r28
    35ee:	df 91       	pop	r29
    35f0:	08 95       	ret

000035f2 <PWM_vSetValue_ICR1_T1_Manual>:

/*Function responsible for assigning a value in ICR1 REG*/
void PWM_vSetValue_ICR1_T1_Manual(uint16 copy_u16Value)
{
    35f2:	df 93       	push	r29
    35f4:	cf 93       	push	r28
    35f6:	00 d0       	rcall	.+0      	; 0x35f8 <PWM_vSetValue_ICR1_T1_Manual+0x6>
    35f8:	cd b7       	in	r28, 0x3d	; 61
    35fa:	de b7       	in	r29, 0x3e	; 62
    35fc:	9a 83       	std	Y+2, r25	; 0x02
    35fe:	89 83       	std	Y+1, r24	; 0x01
	
	ICR1 = copy_u16Value ;
    3600:	e6 e4       	ldi	r30, 0x46	; 70
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	9a 81       	ldd	r25, Y+2	; 0x02
    3608:	91 83       	std	Z+1, r25	; 0x01
    360a:	80 83       	st	Z, r24
	
}
    360c:	0f 90       	pop	r0
    360e:	0f 90       	pop	r0
    3610:	cf 91       	pop	r28
    3612:	df 91       	pop	r29
    3614:	08 95       	ret

00003616 <PWM_vSetValue_OCR1A_T1_Manual>:

/*Function responsible for assining a value in OCR1A REG */
void PWM_vSetValue_OCR1A_T1_Manual(uint16 copy_u16Value)
{
    3616:	df 93       	push	r29
    3618:	cf 93       	push	r28
    361a:	00 d0       	rcall	.+0      	; 0x361c <PWM_vSetValue_OCR1A_T1_Manual+0x6>
    361c:	cd b7       	in	r28, 0x3d	; 61
    361e:	de b7       	in	r29, 0x3e	; 62
    3620:	9a 83       	std	Y+2, r25	; 0x02
    3622:	89 83       	std	Y+1, r24	; 0x01
		OCR1A = copy_u16Value ;
    3624:	ea e4       	ldi	r30, 0x4A	; 74
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	89 81       	ldd	r24, Y+1	; 0x01
    362a:	9a 81       	ldd	r25, Y+2	; 0x02
    362c:	91 83       	std	Z+1, r25	; 0x01
    362e:	80 83       	st	Z, r24
}
    3630:	0f 90       	pop	r0
    3632:	0f 90       	pop	r0
    3634:	cf 91       	pop	r28
    3636:	df 91       	pop	r29
    3638:	08 95       	ret

0000363a <PWM_8_bit_Timer1_Generate>:

void PWM_8_bit_Timer1_Generate(uint8 duty_cycle)
{
    363a:	0f 93       	push	r16
    363c:	1f 93       	push	r17
    363e:	df 93       	push	r29
    3640:	cf 93       	push	r28
    3642:	0f 92       	push	r0
    3644:	cd b7       	in	r28, 0x3d	; 61
    3646:	de b7       	in	r29, 0x3e	; 62
    3648:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=(uint16)( ((uint32)duty_cycle*256)/100 ); //Set Compare value
    364a:	0a e4       	ldi	r16, 0x4A	; 74
    364c:	10 e0       	ldi	r17, 0x00	; 0
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	88 2f       	mov	r24, r24
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	a0 e0       	ldi	r26, 0x00	; 0
    3656:	b0 e0       	ldi	r27, 0x00	; 0
    3658:	ba 2f       	mov	r27, r26
    365a:	a9 2f       	mov	r26, r25
    365c:	98 2f       	mov	r25, r24
    365e:	88 27       	eor	r24, r24
    3660:	24 e6       	ldi	r18, 0x64	; 100
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	40 e0       	ldi	r20, 0x00	; 0
    3666:	50 e0       	ldi	r21, 0x00	; 0
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	0e 94 43 1b 	call	0x3686	; 0x3686 <__udivmodsi4>
    3670:	da 01       	movw	r26, r20
    3672:	c9 01       	movw	r24, r18
    3674:	f8 01       	movw	r30, r16
    3676:	91 83       	std	Z+1, r25	; 0x01
    3678:	80 83       	st	Z, r24
}
    367a:	0f 90       	pop	r0
    367c:	cf 91       	pop	r28
    367e:	df 91       	pop	r29
    3680:	1f 91       	pop	r17
    3682:	0f 91       	pop	r16
    3684:	08 95       	ret

00003686 <__udivmodsi4>:
    3686:	a1 e2       	ldi	r26, 0x21	; 33
    3688:	1a 2e       	mov	r1, r26
    368a:	aa 1b       	sub	r26, r26
    368c:	bb 1b       	sub	r27, r27
    368e:	fd 01       	movw	r30, r26
    3690:	0d c0       	rjmp	.+26     	; 0x36ac <__udivmodsi4_ep>

00003692 <__udivmodsi4_loop>:
    3692:	aa 1f       	adc	r26, r26
    3694:	bb 1f       	adc	r27, r27
    3696:	ee 1f       	adc	r30, r30
    3698:	ff 1f       	adc	r31, r31
    369a:	a2 17       	cp	r26, r18
    369c:	b3 07       	cpc	r27, r19
    369e:	e4 07       	cpc	r30, r20
    36a0:	f5 07       	cpc	r31, r21
    36a2:	20 f0       	brcs	.+8      	; 0x36ac <__udivmodsi4_ep>
    36a4:	a2 1b       	sub	r26, r18
    36a6:	b3 0b       	sbc	r27, r19
    36a8:	e4 0b       	sbc	r30, r20
    36aa:	f5 0b       	sbc	r31, r21

000036ac <__udivmodsi4_ep>:
    36ac:	66 1f       	adc	r22, r22
    36ae:	77 1f       	adc	r23, r23
    36b0:	88 1f       	adc	r24, r24
    36b2:	99 1f       	adc	r25, r25
    36b4:	1a 94       	dec	r1
    36b6:	69 f7       	brne	.-38     	; 0x3692 <__udivmodsi4_loop>
    36b8:	60 95       	com	r22
    36ba:	70 95       	com	r23
    36bc:	80 95       	com	r24
    36be:	90 95       	com	r25
    36c0:	9b 01       	movw	r18, r22
    36c2:	ac 01       	movw	r20, r24
    36c4:	bd 01       	movw	r22, r26
    36c6:	cf 01       	movw	r24, r30
    36c8:	08 95       	ret

000036ca <__prologue_saves__>:
    36ca:	2f 92       	push	r2
    36cc:	3f 92       	push	r3
    36ce:	4f 92       	push	r4
    36d0:	5f 92       	push	r5
    36d2:	6f 92       	push	r6
    36d4:	7f 92       	push	r7
    36d6:	8f 92       	push	r8
    36d8:	9f 92       	push	r9
    36da:	af 92       	push	r10
    36dc:	bf 92       	push	r11
    36de:	cf 92       	push	r12
    36e0:	df 92       	push	r13
    36e2:	ef 92       	push	r14
    36e4:	ff 92       	push	r15
    36e6:	0f 93       	push	r16
    36e8:	1f 93       	push	r17
    36ea:	cf 93       	push	r28
    36ec:	df 93       	push	r29
    36ee:	cd b7       	in	r28, 0x3d	; 61
    36f0:	de b7       	in	r29, 0x3e	; 62
    36f2:	ca 1b       	sub	r28, r26
    36f4:	db 0b       	sbc	r29, r27
    36f6:	0f b6       	in	r0, 0x3f	; 63
    36f8:	f8 94       	cli
    36fa:	de bf       	out	0x3e, r29	; 62
    36fc:	0f be       	out	0x3f, r0	; 63
    36fe:	cd bf       	out	0x3d, r28	; 61
    3700:	09 94       	ijmp

00003702 <__epilogue_restores__>:
    3702:	2a 88       	ldd	r2, Y+18	; 0x12
    3704:	39 88       	ldd	r3, Y+17	; 0x11
    3706:	48 88       	ldd	r4, Y+16	; 0x10
    3708:	5f 84       	ldd	r5, Y+15	; 0x0f
    370a:	6e 84       	ldd	r6, Y+14	; 0x0e
    370c:	7d 84       	ldd	r7, Y+13	; 0x0d
    370e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3710:	9b 84       	ldd	r9, Y+11	; 0x0b
    3712:	aa 84       	ldd	r10, Y+10	; 0x0a
    3714:	b9 84       	ldd	r11, Y+9	; 0x09
    3716:	c8 84       	ldd	r12, Y+8	; 0x08
    3718:	df 80       	ldd	r13, Y+7	; 0x07
    371a:	ee 80       	ldd	r14, Y+6	; 0x06
    371c:	fd 80       	ldd	r15, Y+5	; 0x05
    371e:	0c 81       	ldd	r16, Y+4	; 0x04
    3720:	1b 81       	ldd	r17, Y+3	; 0x03
    3722:	aa 81       	ldd	r26, Y+2	; 0x02
    3724:	b9 81       	ldd	r27, Y+1	; 0x01
    3726:	ce 0f       	add	r28, r30
    3728:	d1 1d       	adc	r29, r1
    372a:	0f b6       	in	r0, 0x3f	; 63
    372c:	f8 94       	cli
    372e:	de bf       	out	0x3e, r29	; 62
    3730:	0f be       	out	0x3f, r0	; 63
    3732:	cd bf       	out	0x3d, r28	; 61
    3734:	ed 01       	movw	r28, r26
    3736:	08 95       	ret

00003738 <itoa>:
    3738:	fb 01       	movw	r30, r22
    373a:	9f 01       	movw	r18, r30
    373c:	e8 94       	clt
    373e:	42 30       	cpi	r20, 0x02	; 2
    3740:	c4 f0       	brlt	.+48     	; 0x3772 <itoa+0x3a>
    3742:	45 32       	cpi	r20, 0x25	; 37
    3744:	b4 f4       	brge	.+44     	; 0x3772 <itoa+0x3a>
    3746:	4a 30       	cpi	r20, 0x0A	; 10
    3748:	29 f4       	brne	.+10     	; 0x3754 <itoa+0x1c>
    374a:	97 fb       	bst	r25, 7
    374c:	1e f4       	brtc	.+6      	; 0x3754 <itoa+0x1c>
    374e:	90 95       	com	r25
    3750:	81 95       	neg	r24
    3752:	9f 4f       	sbci	r25, 0xFF	; 255
    3754:	64 2f       	mov	r22, r20
    3756:	77 27       	eor	r23, r23
    3758:	0e 94 cd 1b 	call	0x379a	; 0x379a <__udivmodhi4>
    375c:	80 5d       	subi	r24, 0xD0	; 208
    375e:	8a 33       	cpi	r24, 0x3A	; 58
    3760:	0c f0       	brlt	.+2      	; 0x3764 <itoa+0x2c>
    3762:	89 5d       	subi	r24, 0xD9	; 217
    3764:	81 93       	st	Z+, r24
    3766:	cb 01       	movw	r24, r22
    3768:	00 97       	sbiw	r24, 0x00	; 0
    376a:	a1 f7       	brne	.-24     	; 0x3754 <itoa+0x1c>
    376c:	16 f4       	brtc	.+4      	; 0x3772 <itoa+0x3a>
    376e:	5d e2       	ldi	r21, 0x2D	; 45
    3770:	51 93       	st	Z+, r21
    3772:	10 82       	st	Z, r1
    3774:	c9 01       	movw	r24, r18
    3776:	0c 94 bd 1b 	jmp	0x377a	; 0x377a <strrev>

0000377a <strrev>:
    377a:	dc 01       	movw	r26, r24
    377c:	fc 01       	movw	r30, r24
    377e:	67 2f       	mov	r22, r23
    3780:	71 91       	ld	r23, Z+
    3782:	77 23       	and	r23, r23
    3784:	e1 f7       	brne	.-8      	; 0x377e <strrev+0x4>
    3786:	32 97       	sbiw	r30, 0x02	; 2
    3788:	04 c0       	rjmp	.+8      	; 0x3792 <strrev+0x18>
    378a:	7c 91       	ld	r23, X
    378c:	6d 93       	st	X+, r22
    378e:	70 83       	st	Z, r23
    3790:	62 91       	ld	r22, -Z
    3792:	ae 17       	cp	r26, r30
    3794:	bf 07       	cpc	r27, r31
    3796:	c8 f3       	brcs	.-14     	; 0x378a <strrev+0x10>
    3798:	08 95       	ret

0000379a <__udivmodhi4>:
    379a:	aa 1b       	sub	r26, r26
    379c:	bb 1b       	sub	r27, r27
    379e:	51 e1       	ldi	r21, 0x11	; 17
    37a0:	07 c0       	rjmp	.+14     	; 0x37b0 <__udivmodhi4_ep>

000037a2 <__udivmodhi4_loop>:
    37a2:	aa 1f       	adc	r26, r26
    37a4:	bb 1f       	adc	r27, r27
    37a6:	a6 17       	cp	r26, r22
    37a8:	b7 07       	cpc	r27, r23
    37aa:	10 f0       	brcs	.+4      	; 0x37b0 <__udivmodhi4_ep>
    37ac:	a6 1b       	sub	r26, r22
    37ae:	b7 0b       	sbc	r27, r23

000037b0 <__udivmodhi4_ep>:
    37b0:	88 1f       	adc	r24, r24
    37b2:	99 1f       	adc	r25, r25
    37b4:	5a 95       	dec	r21
    37b6:	a9 f7       	brne	.-22     	; 0x37a2 <__udivmodhi4_loop>
    37b8:	80 95       	com	r24
    37ba:	90 95       	com	r25
    37bc:	bc 01       	movw	r22, r24
    37be:	cd 01       	movw	r24, r26
    37c0:	08 95       	ret

000037c2 <_exit>:
    37c2:	f8 94       	cli

000037c4 <__stop_program>:
    37c4:	ff cf       	rjmp	.-2      	; 0x37c4 <__stop_program>
